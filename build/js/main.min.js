(function () {
'use strict';

function __$styleInject(css, returnValue) {
  if (typeof document === 'undefined') {
    return returnValue;
  }
  css = css || '';
  var head = document.head || document.getElementsByTagName('head')[0];
  var style = document.createElement('style');
  style.type = 'text/css';
  head.appendChild(style);
  
  if (style.styleSheet){
    style.styleSheet.cssText = css;
  } else {
    style.appendChild(document.createTextNode(css));
  }
  return returnValue;
}

__$styleInject("*{margin:0}body{height:100vh}canvas{position:relative;width:400px;height:300px;display:block;box-shadow:0 0 5px #ccc}input:focus{box-shadow:0 0 2px #eef}.element{max-width:100px;max-height:100px;border:1px #000;box-sizing:border-box}.selected{box-shadow:0 0 5px #666}.desc,.title{display:inline-block;width:5vw}.wrapper{position:relative;top:50%;left:50%;transform:translate(-50%,-50%)}.section,.wrapper{display:inline-block}.section{position:absolute;height:100vh}#output{width:40vw;left:0}#input{width:55vw;right:0}", undefined);

var ImagePart = class ImagePart {
  constructor(data) {
    if (data !== undefined) {
      this.selection = data.selection;
      this.params = {
        width: data.width,
        height: data.height,
        x: data.x,
        y: data.y,
        mirror: data.mirror
      };
    } else {
      this.selection = null;
      this.params = {
        width: 0,
        height: 0,
        x: 0,
        y: 0,
        mirror: false
      };
    }
  }
  setParam(w, h, x, y, mir) {
    this.params.width = w;
    this.params.height = h;
    this.params.x = x;
    this.params.y = y;
    this.params.mir = mir;
  }
};

var TextPart = class TextPart {
  constructor(data) {
    if (data !== undefined) {
      this.context = data.context;
      this.params = {
        size: data.size,
        x: data.x,
        y: data.y,
        mirror: data.mirror
      };
    } else {
      this.context = '';
      this.params = {
        size: 16,
        x: 0,
        y: 0,
        mirror: false
      };
    }
  }
  setParam(con, s, x, y, mir) {
    this.context = con;
    this.params.size = s;
    this.params.x = x;
    this.params.y = y;
    this.params.mir = mir;
  }
};

function drawImage(ctx, img, x, y, width, height) {
  ctx.drawImage(img, x - width / 2, y - height / 2, width, height);
}
function drawMirrorImage(ctx, img, x, y, width, height) {
  ctx.save();
  ctx.scale(-1, 1);
  ctx.drawImage(img, -x - width / 2, y - height / 2, width, height);
  ctx.restore();
}
function fillText(ctx, text, x, y) {
  ctx.fillText(text, x, y);
}
function fillMirrorText(ctx, text, x, y) {
  ctx.save();
  ctx.scale(-1, 1);
  ctx.fillText(text, x, y);
  ctx.restore();
}

function draw() {
  var canvas = document.querySelector('#result');
  var ctx = canvas.getContext('2d');
  ctx.clearRect(0, 0, canvas.width, canvas.height);
  if (this.head[0] && this.head[0].selection !== null) {
    if (!this.head[0].params.mirror) {
      drawImage(ctx, document.querySelector('#head0').querySelectorAll('.element')[this.head[0].selection], this.head[0].params.x, this.head[0].params.y, this.head[0].params.width, this.head[0].params.height);
    } else {
      drawMirrorImage(ctx, document.querySelector('#head0').querySelectorAll('.element')[this.head[0].selection], this.head[0].params.x, this.head[0].params.y, this.head[0].params.width, this.head[0].params.height);
    }
  }
  if (this.face[0] && this.face[0].selection !== null) {
    if (!this.face[0].params.mirror) {
      drawImage(ctx, document.querySelector('#face0').querySelectorAll('.element')[this.face[0].selection], this.face[0].params.x, this.face[0].params.y, this.face[0].params.width, this.face[0].params.height);
    } else {
      drawMirrorImage(ctx, document.querySelector('#face0').querySelectorAll('.element')[this.face[0].selection], this.face[0].params.x, this.face[0].params.y, this.face[0].params.width, this.face[0].params.height);
    }
  }
  for (var i = 0; i < this.bodies.length; i++) {
    if (this.bodies[i].selection !== null) {
      if (!this.bodies[i].params.mirror) {
        drawImage(ctx, document.querySelector('#body' + i).querySelectorAll('.element')[this.bodies[i].selection], this.bodies[i].params.x, this.bodies[i].params.y, this.bodies[i].params.width, this.bodies[i].params.height);
      } else {
        drawMirrorImage(ctx, document.querySelector('#body' + i).querySelectorAll('.element')[this.bodies[i].selection], this.bodies[i].params.x, this.bodies[i].params.y, this.bodies[i].params.width, this.bodies[i].params.height);
      }
    }
  }

  for (var i = 0; i < this.accessories.length; i++) {
    if (this.accessories[i].selection !== null) {
      if (!this.accessories[i].params.mirror) {
        drawImage(ctx, document.querySelector('#accessory' + i).querySelectorAll('.element')[this.accessories[i].selection], this.accessories[i].params.x, this.accessories[i].params.y, this.accessories[i].params.width, this.accessories[i].params.height);
      } else {
        drawMirrorImage(ctx, document.querySelector('#accessory' + i).querySelectorAll('.element')[this.accessories[i].selection], this.accessories[i].params.x, this.accessories[i].params.y, this.accessories[i].params.width, this.accessories[i].params.height);
      }
    }
  }

  for (var i = 0; i < this.lines.length; i++) {
    if (this.lines[i].context !== '') {
      ctx.font = this.lines[i].params.size + "px Georgia";
      ctx.textAlign = "center";
      ctx.textBaseline = "middle";
      if (!this.lines[i].params.mirror) {
        fillText(ctx, this.lines[i].context, this.lines[i].params.x, parseInt(this.lines[i].params.y) + parseInt(this.lines[i].params.size));
      } else {
        fillMirrorText(ctx, this.lines[i].context, this.lines[i].params.x, parseInt(this.lines[i].params.y) + parseInt(this.lines[i].params.size));
      }
    }
  }
}

var el_heads = [{
  src: 'resources/heads/0000.png',
  width: 150,
  height: 150,
  x: 125,
  y: 70,
  mirror: false
}];
var el_faces = [{
  src: 'resources/faces/0000.png',
  width: 60,
  height: 70,
  x: 170,
  y: 87,
  mirror: false
}, {
  src: 'resources/faces/0001.png',
  width: 71,
  height: 64,
  x: 165,
  y: 99,
  mirror: false
}, {
  src: 'resources/faces/0002.png',
  width: 71,
  height: 64,
  x: 165,
  y: 99,
  mirror: false
}];
var el_bodies = [{
  src: 'resources/bodies/0000.png',
  width: 210,
  height: 92,
  x: 125,
  y: 105,
  mirror: false
}, {
  src: 'resources/bodies/0001.png',
  width: 64,
  height: 122,
  x: 269,
  y: 74,
  mirror: false
}, {
  src: 'resources/bodies/0002.png',
  width: 64,
  height: 122,
  x: 269,
  y: 74,
  mirror: false
}, {
  src: 'resources/bodies/0003.png',
  width: 64,
  height: 122,
  x: 269,
  y: 74,
  mirror: false
}, {
  src: 'resources/bodies/0004.png',
  width: 64,
  height: 122,
  x: 269,
  y: 74,
  mirror: false
}, {
  src: 'resources/bodies/0005.png',
  width: 64,
  height: 122,
  x: 269,
  y: 74,
  mirror: false
}];
var el_accessories = [{
  src: 'resources/accessories/0000.png',
  width: 71,
  height: 64,
  x: 165,
  y: 99,
  mirror: false
}];

Vue.component('image-part', {
  template: '<div class="part" :id="name" @focus="onPartSelected" tabindex="0" @keydown="onkeydown">\
              <div>\
                <span class="title">{{name}}:</span>\
                <div>\
                  <img class="element" v-for="(element, i) in elements" :class="{ selected: data.selection==i }" :src="element.src" :data-index="i" @click="onclick">\
                </div>\
              </div>\
              <div>\
                <span class="desc">width:</span><input type="text" v-model="data.params.width">\
                <span class="desc">height:</span><input type="text" v-model="data.params.height">\
              </div>\
              <div>\
                <span class="desc">x:</span><input type="text" v-model="data.params.x">\
                <span class="desc">y:</span><input type="text" v-model="data.params.y">\
              </div>\
              <div>\
                <input type="checkbox" v-model="data.params.mirror">镜像 \
              </div>\
             </div>',
  props: ['name', 'elements'],
  data: function () {
    return {
      data: new ImagePart()
    };
  },
  watch: {
    'data.params.width': function (n, o) {
      if (!isNaN(n)) {
        this.$emit('changed', this.name, this.data);
      } else {
        this.data.params.width = o;
      }
    },
    'data.params.height': function (n, o) {
      if (!isNaN(n)) {
        this.$emit('changed', this.name, this.data);
      } else {
        this.data.params.height = o;
      }
    },
    'data.params.x': function (n, o) {
      if (!isNaN(n)) {
        this.$emit('changed', this.name, this.data);
      } else {
        this.data.params.x = o;
      }
    },
    'data.params.y': function (n, o) {
      if (!isNaN(n)) {
        this.$emit('changed', this.name, this.data);
      } else {
        this.data.params.y = o;
      }
    },
    'data.params.mirror': function (n, o) {}
  },
  methods: {
    onkeydown: function (e) {
      if (e.metaKey || e.ctrlKey || e.shiftKey) {
        e.preventDefault();
      }
      if (e.key === 'ArrowLeft') {
        if (e.metaKey || e.ctrlKey) {
          if (e.shiftKey) {
            this.data.params.width -= 10;
          } else {
            this.data.params.width--;
          }
          if (this.data.params.width < 0) {
            this.data.params.width = 0;
          }
        } else {
          if (e.shiftKey) {
            this.data.params.x -= 10;
          } else {
            this.data.params.x--;
          }
        }
      }
      if (e.key === 'ArrowRight') {
        if (e.metaKey || e.ctrlKey) {
          if (e.shiftKey) {
            this.data.params.width += 10;
          } else {
            this.data.params.width++;
          }
        } else {
          if (e.shiftKey) {
            this.data.params.x += 10;
          } else {
            this.data.params.x++;
          }
        }
      }
      if (e.key === 'ArrowUp') {
        if (e.metaKey || e.ctrlKey) {
          if (e.shiftKey) {
            this.data.params.height -= 10;
          } else {
            this.data.params.height--;
          }
          if (this.data.params.height < 0) {
            this.data.params.height = 0;
          }
        } else {
          if (e.shiftKey) {
            this.data.params.y -= 10;
          } else {
            this.data.params.y--;
          }
        }
      }
      if (e.key === 'ArrowDown') {
        if (e.metaKey || e.ctrlKey) {
          if (e.shiftKey) {
            this.data.params.height += 10;
          } else {
            this.data.params.height++;
          }
        } else {
          if (e.shiftKey) {
            this.data.params.y += 10;
          } else {
            this.data.params.y++;
          }
        }
      }
    },
    ondrag: function (dx, dy, mods) {
      if (this.data.selection !== null) {
        // console.log(this.name, dx, dy, mods)
        if (mods.ctrlKey || mods.metaKey) {
          this.data.params.width += dx;
          this.data.params.height += dy;
        } else {
          this.data.params.x += dx;
          this.data.params.y += dy;
        }
      }
    },
    onclick: function (e) {
      this.data.selection = e.target.dataset.index;
      this.data.params.width = this.elements[e.target.dataset.index].width;
      this.data.params.height = this.elements[e.target.dataset.index].height;
      this.data.params.x = this.elements[e.target.dataset.index].x;
      this.data.params.y = this.elements[e.target.dataset.index].y;
      this.data.params.mirror = false;
      this.$emit('changed', this.name, this.data);
      // console.log(JSON.parse(JSON.stringify(this.data)));
    },
    onPartSelected: function (e) {
      // console.log('focused')
      this.$emit('focused', this.name);
    }
  },
  created: function () {}
});
Vue.component('text-part', {
  template: '<div class="part" :id="name" @mousedown="onPartSelected" tabindex="0" @keydown="onkeydown">\
              <div>\
                <span class="title">{{name}}:</span><input type="text" v-model="data.context">\
              </div>\
              <div>\
                <span class="desc">size:</span><input type="text" v-model="data.params.size">\
              <div>\
              </div>\
                <span class="desc">x:</span><input type="text" v-model="data.params.x">\
                <span class="desc">y:</span><input type="text" v-model="data.params.y">\
              </div>\
              <div>\
                <input type="checkbox" v-model="data.params.mirror">镜像 \
              </div>\
            </div>',
  props: ['name'],
  data: function () {
    return {
      data: new TextPart()
    };
  },
  watch: {
    'data.params.size': function (n, o) {
      if (!isNaN(n)) {
        this.$emit('changed', this.name, this.data);
      } else {
        this.data.params.width = o;
      }
    },
    'data.params.x': function (n, o) {
      if (!isNaN(n)) {
        this.$emit('changed', this.name, this.data);
      } else {
        this.data.params.x = o;
      }
    },
    'data.params.y': function (n, o) {
      if (!isNaN(n)) {
        this.$emit('changed', this.name, this.data);
      } else {
        this.data.params.y = o;
      }
    },
    'data.params.mirror': function (n, o) {}
  },
  methods: {
    onkeydown: function (e) {
      if (e.metaKey || e.ctrlKey || e.shiftKey) {
        e.preventDefault();
      }
      if (e.key === 'ArrowLeft') {
        if (e.metaKey || e.ctrlKey) {
          if (e.shiftKey) {
            this.data.params.size -= 10;
          } else {
            this.data.params.size--;
          }
          if (this.data.params.size < 0) {
            this.data.params.size = 0;
          }
        } else {
          if (e.shiftKey) {
            this.data.params.x -= 10;
          } else {
            this.data.params.x--;
          }
        }
      }
      if (e.key === 'ArrowRight') {
        if (e.metaKey || e.ctrlKey) {
          if (e.shiftKey) {
            this.data.params.size += 10;
          } else {
            this.data.params.size++;
          }
        } else {
          if (e.shiftKey) {
            this.data.params.x += 10;
          } else {
            this.data.params.x++;
          }
        }
      }
      if (e.key === 'ArrowUp') {
        if (e.metaKey || e.ctrlKey) {
          if (e.shiftKey) {
            this.data.params.size -= 10;
          } else {
            this.data.params.size--;
          }
          if (this.data.params.size < 0) {
            this.data.params.size = 0;
          }
        } else {
          if (e.shiftKey) {
            this.data.params.y -= 10;
          } else {
            this.data.params.y--;
          }
        }
      }
      if (e.key === 'ArrowDown') {
        if (e.metaKey || e.ctrlKey) {
          if (e.shiftKey) {
            this.data.params.size += 10;
          } else {
            this.data.params.size++;
          }
        } else {
          if (e.shiftKey) {
            this.data.params.y += 10;
          } else {
            this.data.params.y++;
          }
        }
      }
    },
    ondrag: function (dx, dy, mods) {
      if (this.data.context !== null) {
        this.data.params.x += dx;
        this.data.params.y += dy;
      }
    },
    onPartSelected: function (e) {
      // console.log(JSON.parse(JSON.stringify(this.data)));
    }
  }
});

function _init(target, swipeCallback, moveCallback, touchCallback, endCallback, tapCallback, _moveThreshold) {
  target.addEventListener('touchstart', handleTouchStart, { passive: false });
  target.addEventListener('touchmove', handleTouchMove, { passive: false });
  target.addEventListener('touchend', handleTouchEnd, { passive: false });
  target.addEventListener('mousedown', handleTouchStart, { passive: false });
  target.addEventListener('mousemove', handleTouchMove, { passive: false });
  target.addEventListener('mouseup', handleTouchEnd, { passive: false });

  var moveThreshold = _moveThreshold * target.getBoundingClientRect().width || 0.2 * target.getBoundingClientRect().width;
  var tapThreshold = 15;
  var tapTime = 1000;
  var xDown = null;
  var yDown = null;
  var xPrev = null;
  var yPrev = null;
  var xUp = null;
  var yUp = null;
  var xMove = null;
  var yMove = null;
  var xDiff = null;
  var yDiff = null;
  var time = null;

  function clear() {
    xDown = null;
    yDown = null;
    xPrev = null;
    yPrev = null;
    xUp = null;
    yUp = null;
    xMove = null;
    yMove = null;
    xDiff = null;
    yDiff = null;
    time = null;
  }

  function handleTouchStart(evt) {
    evt.preventDefault();
    evt.stopPropagation();
    if (xDown || yDown) {
      return;
    }
    xDown = evt.clientX || evt.touches[0].clientX;
    yDown = evt.clientY || evt.touches[0].clientY;
    xPrev = xDown;
    yPrev = yDown;
    time = Date.now();
    touchCallback && touchCallback({ ctrlKey: evt.ctrlKey, altKey: evt.altKey, shiftKey: evt.shiftKey, metaKey: evt.metaKey });
  }

  function handleTouchMove(evt) {
    evt.preventDefault();
    evt.stopPropagation();
    if (!xDown || !yDown) {
      return;
    }

    xPrev = xUp || xPrev;
    yPrev = yUp || yPrev;

    xUp = evt.clientX || evt.touches[0].clientX;
    yUp = evt.clientY || evt.touches[0].clientY;

    xMove = xDown - xUp;
    yMove = yDown - yUp;
    xDiff = xUp - xPrev;
    yDiff = yUp - yPrev;

    if (Math.abs(xMove) > Math.abs(yMove)) {
      /*most significant*/
      if (xMove > moveThreshold) {
        /* left swipe */
        swipeCallback && swipeCallback(0, 'left', { ctrlKey: evt.ctrlKey, altKey: evt.altKey, shiftKey: evt.shiftKey, metaKey: evt.metaKey });
        clear();
      }
      if (xMove < -moveThreshold) {
        /* right swipe */
        swipeCallback && swipeCallback(1, 'right', { ctrlKey: evt.ctrlKey, altKey: evt.altKey, shiftKey: evt.shiftKey, metaKey: evt.metaKey });
        clear();
      }
    } else {
      if (yMove > moveThreshold) {
        /* up swipe */
        swipeCallback && swipeCallback(2, 'up', { ctrlKey: evt.ctrlKey, altKey: evt.altKey, shiftKey: evt.shiftKey, metaKey: evt.metaKey });
        clear();
      }
      if (yMove < -moveThreshold) {
        /* down swipe */
        swipeCallback && swipeCallback(3, 'down', { ctrlKey: evt.ctrlKey, altKey: evt.altKey, shiftKey: evt.shiftKey, metaKey: evt.metaKey });
        clear();
      }
    }
    moveCallback && moveCallback(xDiff, yDiff, { ctrlKey: evt.ctrlKey, altKey: evt.altKey, shiftKey: evt.shiftKey, metaKey: evt.metaKey });
  }

  function handleTouchEnd(evt) {
    evt.stopPropagation();
    if (evt.touches && evt.touches.length) {
      return;
    }
    endCallback && endCallback({ ctrlKey: evt.ctrlKey, altKey: evt.altKey, shiftKey: evt.shiftKey, metaKey: evt.metaKey });
    if (Date.now() - time < tapTime) {
      if (!xMove || xMove && Math.abs(xMove - xDown) < tapThreshold && Math.abs(yMove - yDown) < tapThreshold) {
        tapCallback && tapCallback({ ctrlKey: evt.ctrlKey, altKey: evt.altKey, shiftKey: evt.shiftKey, metaKey: evt.metaKey });
      }
    }
    clear();
  }
}
var swipe = {
  init: _init
};

var swipeMixin = {
  methods: {
    swipeHandler: function (op, text) {
      console.log('op', op, 'text', text);
    },
    moveHandler: function (dx, dy, mods) {
      this.activePart && this.$refs[this.activePart].ondrag(dx, dy, mods);
    },
    touchHandler: function () {
      console.log('touched');
    },
    endHandler: function () {
      console.log('ended');
    },
    tapHandler: function () {
      console.log('tapped');
    }
  },
  mounted: function () {
    swipe.init(document.querySelector('#result'), this.swipeHandler, this.moveHandler, this.touchHandler, this.endHandler, this.tapHandler, 10);
  }
};

var app = new Vue({
  el: '#app',
  mixins: [swipeMixin],
  data: {
    canvasWidth: 400,
    canvasHeight: 300,
    elements: {
      heads: [],
      faces: [],
      bodies: [],
      accessories: []
    },
    head: [new ImagePart()],
    face: [new ImagePart()],
    bodies: [],
    accessories: [],
    lines: [new TextPart()],
    activePart: null
  },
  methods: {
    updateData: function (name, data) {
      if (name.startsWith('head')) {
        Vue.set(this.head, 0, data);
      }
      if (name.startsWith('face')) {
        Vue.set(this.face, 0, data);
      }
      if (name.startsWith('bod')) {
        var target = parseInt(name.slice('body'.length));
        Vue.set(this.bodies, target, data);
      }
      if (name.startsWith('acc')) {
        var target = parseInt(name.slice('accessory'.length));
        Vue.set(this.accessories, target, data);
      }
      if (name.startsWith('line')) {
        var target = parseInt(name.slice(4));
        Vue.set(this.lines, target, data);
      }
      this.redraw();
    },
    updateTarget: function (name) {
      this.activePart = name;
    },
    addBody: function () {
      if (this.bodies.length <= 3) {
        this.bodies.push(new ImagePart());
      } else {
        return;
      }
    },
    addAccessories: function () {
      if (this.accessories.length <= 3) {
        this.accessories.push(new ImagePart());
      } else {
        return;
      }
    },
    addLine: function () {
      if (this.lines.length <= 3) {
        this.lines.push(new TextPart());
      } else {
        return;
      }
    },
    redraw: draw
  },
  created: function () {
    for (var i = 0; i < el_heads.length; i++) {
      this.elements.heads.push(el_heads[i]);
    }
    for (var i = 0; i < el_faces.length; i++) {
      this.elements.faces.push(el_faces[i]);
    }
    for (var i = 0; i < el_bodies.length; i++) {
      this.elements.bodies.push(el_bodies[i]);
    }
    for (var i = 0; i < el_accessories.length; i++) {
      this.elements.accessories.push(el_accessories[i]);
    }
  }
});

}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
