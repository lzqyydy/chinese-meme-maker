function __$styleInject(css, returnValue) {
  if (typeof document === 'undefined') {
    return returnValue;
  }
  css = css || '';
  var head = document.head || document.getElementsByTagName('head')[0];
  var style = document.createElement('style');
  style.type = 'text/css';
  head.appendChild(style);
  
  if (style.styleSheet){
    style.styleSheet.cssText = css;
  } else {
    style.appendChild(document.createTextNode(css));
  }
  return returnValue;
}

__$styleInject("*{margin:0}:focus{outline:none}:root{--view-width:440px;--view-height:350px;--section-padding:40px;--desc-width:50px;--desc-size:14px;--element-size:60px}@media (max-width:1000px){:root{--view-width:44vw;--view-height:35vw;--desc-width:5vw;--desc-size:14px}}#app{display:flex;flex-direction:column;flex-wrap:wrap}#app,.section{max-width:100vw;max-height:100vh}.section{display:inline-block;overflow:hidden}#view{width:var(--view-width);height:var(--view-height);box-sizing:border-box;padding:var(--section-padding)}#canvas{position:relative;width:100%;height:100%;display:block;box-shadow:0 0 5px #ccc}#controller{width:var(--view-width);height:calc(100vh - var(--view-height));box-sizing:border-box;padding:0 var(--section-padding)}.order{margin:1px;padding:3px;background-color:#ccc;border-radius:3px}.order-highlight{background-color:#fed7d7}#models{width:calc(100vw - var(--view-width));box-sizing:border-box;padding:var(--section-padding)}#model{display:none}.sortable-ghost{opacity:.5}@media (max-width:800px){:root{--section-padding:20px}#app{flex-wrap:nowrap;justify-content:space-between}.section{display:inline-block;max-width:100vw;max-height:100vh;overflow:hidden}#view{width:100vw;height:77vw;max-width:calc((50vh - var(--section-padding) * 2) / 3 * 4 + var(--section-padding) * 2);max-height:50vh;box-sizing:border-box;padding:var(--section-padding)}#canvas{position:relative;width:100%;height:100%;display:block;box-shadow:0 0 5px #ccc}#controller{width:100vw;height:auto;box-sizing:border-box;padding:0 var(--section-padding)}.order{display:inline-block}#models{display:none}#model{display:block;width:100vw;height:auto;box-sizing:border-box;padding:var(--section-padding)}}#imcompitableCover{width:100vw;height:100vh;background-color:#fff}", undefined);

const canvasWidth = 360;
const canvasHeight = 270;

var ImagePart = class ImagePart {
  constructor(data) {
    if (data !== undefined) {
      this.selection = data.selection;
      this.params = {
        width: data.params.width,
        height: data.params.height,
        x: data.params.x,
        y: data.params.y,
        rotation: data.params.rotation,
        mirror: data.params.mirror
      };
    } else {
      this.selection = null;
      this.params = {
        width: 0,
        height: 0,
        x: 0,
        y: 0,
        rotation: 0,
        mirror: false
      };
    }
  }
  set(s, w, h, x, y, r, m, k) {
    this.selection = s;
    this.params.width = w;
    this.params.height = h;
    this.params.x = x;
    this.params.y = y;
    this.params.rotation = r;
    this.params.mirror = m;
  }
};

var TextPart = class TextPart {
  constructor(data) {
    if (data !== undefined) {
      this.context = data.context;
      this.params = {
        size: data.params.size,
        x: data.params.x,
        y: data.params.y,
        rotation: data.params.rotation,
        mirror: data.params.mirror
      };
    } else {
      this.context = '';
      this.params = {
        size: 16,
        x: 0,
        y: 0,
        rotation: 0,
        mirror: false
      };
    }
  }
  setParam(c, s, x, y, r, m) {
    this.context = c;
    this.params.size = s;
    this.params.x = x;
    this.params.y = y;
    this.params.rotation = r;
    this.params.mir = mir;
  }
};

function drawImage(ctx, img, x, y, w, h, r, m) {
  ctx.save();
  if (m) {
    ctx.scale(-1, 1);
    ctx.translate(-ctx.canvas.width / 2 - x, ctx.canvas.height / 2 + y);
    ctx.rotate(r * Math.PI / 180);
  } else {
    ctx.translate(ctx.canvas.width / 2 + x, ctx.canvas.height / 2 + y);
    ctx.rotate(r * Math.PI / 180);
  }
  ctx.drawImage(img, -w / 2, -h / 2, w, h);
  ctx.restore();
}

function fillText(ctx, text, x, y, s, r, m) {
  ctx.fillStyle = "#000000";
  ctx.font = s + "px Georgia";
  ctx.textBaseline = "middle";
  ctx.textAlign = "center";
  ctx.save();
  if (m) {
    ctx.scale(-1, 1);
    ctx.translate(-ctx.canvas.width / 2 - x, ctx.canvas.height / 2 + y);
    ctx.rotate(r * Math.PI / 180);
  } else {
    ctx.translate(ctx.canvas.width / 2 + x, ctx.canvas.height / 2 + y);
    ctx.rotate(r * Math.PI / 180);
  }
  ctx.fillText(text, 0, 0);
  ctx.restore();
}

function drawBorder(ctx, t, r, b, l) {
  ctx.save();
  ctx.translate(ctx.canvas.width / 2, ctx.canvas.height / 2);
  ctx.strokeRect(l, t, r - l, b - t);
  ctx.restore();
}

var newDraw = function (drawList) {
  var canvas = document.querySelector('#canvas');
  var ctx = canvas.getContext('2d');
  ctx.fillStyle = "#FFFFFF";
  ctx.fillRect(0, 0, canvas.width, canvas.height);
  for (var i = 0; i < drawList.length; i++) {
    if (drawList[i].data && drawList[i].data instanceof ImagePart) {
      if (drawList[i].data.selection !== null) {
        drawImage(ctx, document.querySelector('#' + drawList[i].type + drawList[i].index).querySelectorAll('.element')[drawList[i].data.selection], +drawList[i].data.params.x, +drawList[i].data.params.y, +drawList[i].data.params.width, +drawList[i].data.params.height, +drawList[i].data.params.rotation, drawList[i].data.params.mirror);
      }
    }
    if (drawList[i].data && drawList[i].data instanceof TextPart) {
      if (drawList[i].data.context !== null) {
        fillText(ctx, drawList[i].data.context, +drawList[i].data.params.x, +drawList[i].data.params.y, +drawList[i].data.params.size, +drawList[i].data.params.rotation, drawList[i].data.params.mirror);
      }
    }
  }
};

var borderValueCheck = function (rect, item, lineWidth) {
  if (item instanceof TextPart) {
    if (!rect.top || rect.top > +item.params.y - item.params.size / 2) {
      rect.top = +item.params.y - item.params.size / 2;
    }
    if (!rect.right || rect.right < +item.params.x + lineWidth / 2) {
      rect.right = +item.params.x + lineWidth / 2;
    }
    if (!rect.bottom || rect.bottom < +item.params.y + item.params.size / 2) {
      rect.bottom = +item.params.y + item.params.size / 2;
    }
    if (!rect.left || rect.left > +item.params.x - lineWidth / 2) {
      rect.left = +item.params.x - lineWidth / 2;
    }
  }
  if (item instanceof ImagePart) {
    if (!rect.top || rect.top > +item.params.y - item.params.height / 2) {
      rect.top = +item.params.y - item.params.height / 2;
    }
    if (!rect.right || rect.right < +item.params.x + item.params.width / 2) {
      rect.right = +item.params.x + item.params.width / 2;
    }
    if (!rect.bottom || rect.bottom < +item.params.y + item.params.height / 2) {
      rect.bottom = +item.params.y + item.params.height / 2;
    }
    if (!rect.left || rect.left > +item.params.x - item.params.width / 2) {
      rect.left = +item.params.x - item.params.width / 2;
    }
  }
};

var newBorder = function (drawList, padding, isDrawBorder) {
  var canvas = document.querySelector('#canvas');
  var ctx = canvas.getContext('2d');

  var rect = { top: null, right: null, bottom: null, left: null };
  padding = padding || 0;

  for (var i = 0; i < drawList.length; i++) {
    if (drawList[i].data && drawList[i].data instanceof ImagePart) {
      if (drawList[i].data.selection !== null) {
        borderValueCheck(rect, drawList[i].data);
      }
    }
    if (drawList[i].data && drawList[i].data instanceof TextPart) {
      if (drawList[i].data.context !== null) {
        ctx.font = drawList[i].data.params.size + "px Georgia";
        borderValueCheck(rect, drawList[i].data, ctx.measureText(drawList[i].data.context).width);
      }
    }
  }

  if (isDrawBorder && rect.top !== null) {
    drawBorder(ctx, rect.top - padding - 1, rect.right + padding + 1, rect.bottom + padding + 1, rect.left - padding - 1);
  }
  if (rect.top !== null) {
    return rect;
  } else {
    return { top: 0, right: 0, bottom: 0, left: 0 };
  }
};

var el_heads = [{
  src: 'resources/heads/0000.png',
  width: 130,
  height: 115,
  x: 0,
  y: 0,
  rotation: 0,
  mirror: false
}];
var el_faces = [{
  src: 'resources/faces/0000.png',
  width: 60,
  height: 70,
  x: 0,
  y: 0,
  rotation: 0,
  mirror: false
}, {
  src: 'resources/faces/0001.png',
  width: 71,
  height: 64,
  x: 0,
  y: 0,
  rotation: 0,
  mirror: false
}, {
  src: 'resources/faces/0002.png',
  width: 71,
  height: 64,
  x: 0,
  y: 0,
  rotation: 0,
  mirror: false
}];
var el_bodies = [{
  src: 'resources/bodies/0000.png',
  width: 210,
  height: 92,
  x: 0,
  y: 0,
  rotation: 0,
  mirror: false
}, {
  src: 'resources/bodies/0001.png',
  width: 64,
  height: 122,
  x: 0,
  y: 0,
  rotation: 0,
  mirror: false
}, {
  src: 'resources/bodies/0002.png',
  width: 64,
  height: 122,
  x: 0,
  y: 0,
  rotation: 0,
  mirror: false
}, {
  src: 'resources/bodies/0003.png',
  width: 64,
  height: 122,
  x: 0,
  y: 0,
  rotation: 0,
  mirror: false
}, {
  src: 'resources/bodies/0004.png',
  width: 64,
  height: 122,
  x: 0,
  y: 0,
  rotation: 0,
  mirror: false
}, {
  src: 'resources/bodies/0005.png',
  width: 64,
  height: 122,
  x: 0,
  y: 0,
  rotation: 0,
  mirror: false
}];
var el_accessories = [{
  src: 'resources/accessories/0000.png',
  width: 71,
  height: 64,
  x: 0,
  y: 0,
  rotation: 0,
  mirror: false
}];

// copied from offital Vue examples
var m = { render: function () {
    var _vm = this;var _h = _vm.$createElement;var _c = _vm._self._c || _h;return _c('transition', { attrs: { "name": "modal" } }, [_c('div', { staticClass: "modal-mask" }, [_c('div', { staticClass: "modal-wrapper" }, [_c('div', { staticClass: "modal-container" }, [_c('div', { staticClass: "modal-header" }, [_vm._t("header", [_vm._v("default header")])], 2), _c('div', { staticClass: "modal-body" }, [_vm._t("body", [_vm._v("default body")])], 2), _c('div', { staticClass: "modal-footer" }, [_vm._t("footer", [_vm._v("default footer")]), _vm._t("button", [_c('button', { staticClass: "modal-default-button", attrs: { "disabled": _vm.disabled }, on: { "click": _vm.handle } }, [_vm._v("OK")])])], 2)])])])]);
  }, staticRenderFns: [],
  data() {
    return {
      disabled: false
    };
  },
  methods: {
    handle() {
      this.$emit('close');
      this.disabled = true;
    }
  }
};

var f = { render: function () {
    var _vm = this;var _h = _vm.$createElement;var _c = _vm._self._c || _h;return _c('div', { staticClass: "folder" }, [_c('div', { staticClass: "folder-hint", class: { 'folder-collapsed': _vm.collapse }, on: { "mousedown": _vm.op, "touchstart": _vm.op } }, [_vm._v(_vm._s(_vm.name))]), _vm._t("default")], 2);
  }, staticRenderFns: [], _scopeId: 'data-v-10902746',
  data() {
    return {
      collapse: true
    };
  },
  props: ['name'],
  methods: {
    op() {
      this.collapse = !this.collapse;
    }
  },
  components: {}
};

// Array.apply(null, { length: 136 }).map(function(value, index){
//   return index;
// })


function clip(value, min, max) {
  if (value < min) {
    return min;
  }
  if (value > max) {
    return max;
  }
  return value;
}

var findClosest = function (arr, v) {
  var r;
  var diff = Number.MAX_SAFE_INTEGER;

  for (var i = 0; i < arr.length; i++) {
    if (Math.abs(arr[i] - v) < diff) {
      r = i;
      diff = Math.abs(arr[i] - v);
    }
  }
  return arr[r];
};

//@touchstart="_handleStart" @touchmove="_handleMove" @touchend="_handleEnd" @touchcancel="_handleEnd" @mousedown="_handleStart" @mousemove="_handleMove" @mouseup="_handleEnd" @mouseleave="_handleEnd"

//touchCallback, moveCallback, endCallback, swipeCallback, tapCallback
var swipe_vue = {
  data() {
    return {
      swipeParams: {
        _moveThreshold: 50,
        _tapThreshold: 15,
        _tapTime: 1000,
        _xDown: null,
        _yDown: null,
        _xPrev: null,
        _yPrev: null,
        _xUp: null,
        _yUp: null,
        _xMove: null,
        _yMove: null,
        _xDiff: null,
        _yDiff: null,
        _touchTime: null,
        _xVelocity: null,
        _yVelocity: null,
        _moveTime: null,
        _moved: false
      }
    };
  },
  methods: {
    _swipeClear() {
      this.swipeParams._xDown = null;
      this.swipeParams._yDown = null;
      this.swipeParams._xPrev = null;
      this.swipeParams._yPrev = null;
      this.swipeParams._xUp = null;
      this.swipeParams._yUp = null;
      this.swipeParams._xMove = null;
      this.swipeParams._yMove = null;
      this.swipeParams._xDiff = null;
      this.swipeParams._yDiff = null;
      this.swipeParams._touchTime = null;
      this.swipeParams._xVelocity = 0;
      this.swipeParams._yVelocity = 0;
      this.swipeParams._moveTime = null;
      this.swipeParams._moved = false;
    },
    _handleStart(evt) {
      evt.preventDefault();
      evt.stopPropagation();
      if (this.swipeParams._xDown || this.swipeParams._yDown) {
        return;
      }
      this.swipeParams._xDown = evt.clientX || evt.touches[0].clientX;
      this.swipeParams._yDown = evt.clientY || evt.touches[0].clientY;
      this.swipeParams._xPrev = this.swipeParams._xDown;
      this.swipeParams._yPrev = this.swipeParams._yDown;
      this.swipeParams._xVelocity = 0;
      this.swipeParams._yVelocity = 0;
      this.swipeParams._touchTime = Date.now();
      this.swipeParams._moveTime = Date.now();
      this.touchCallback && this.touchCallback({ ctrlKey: evt.ctrlKey, altKey: evt.altKey, shiftKey: evt.shiftKey, metaKey: evt.metaKey });
    },
    _handleMove(evt) {
      evt.preventDefault();
      evt.stopPropagation();
      if (!this.swipeParams._xDown || !this.swipeParams._yDown) {
        return;
      }

      this.swipeParams._xPrev = this.swipeParams._xUp || this.swipeParams._xPrev;
      this.swipeParams._yPrev = this.swipeParams._yUp || this.swipeParams._yPrev;

      this.swipeParams._xUp = evt.clientX || evt.touches[0].clientX;
      this.swipeParams._yUp = evt.clientY || evt.touches[0].clientY;

      this.swipeParams._xMove = this.swipeParams._xDown - this.swipeParams._xUp;
      this.swipeParams._yMove = this.swipeParams._yDown - this.swipeParams._yUp;
      this.swipeParams._xDiff = this.swipeParams._xUp - this.swipeParams._xPrev;
      this.swipeParams._yDiff = this.swipeParams._yUp - this.swipeParams._yPrev;
      this.swipeParams._xVelocity = 0.8 * 1000 * this.swipeParams._xDiff / (1 + Date.now() - this.swipeParams._moveTime) + 0.2 * this.swipeParams._xVelocity;
      this.swipeParams._yVelocity = 0.8 * 1000 * this.swipeParams._yDiff / (1 + Date.now() - this.swipeParams._moveTime) + 0.2 * this.swipeParams._yVelocity;

      if (!this.swipeParams._moved) {
        if (Math.abs(this.swipeParams._xMove) > Math.abs(this.swipeParams._yMove)) {
          /*most significant*/
          if (this.swipeParams._xMove > this.swipeParams._moveThreshold) {
            /* left swipe */
            this.swipeCallback && this.swipeCallback(0, 'left', { ctrlKey: evt.ctrlKey, altKey: evt.altKey, shiftKey: evt.shiftKey, metaKey: evt.metaKey });
            this.swipeParams._moved = true;
          }
          if (this.swipeParams._xMove < -this.swipeParams._moveThreshold) {
            /* right swipe */
            this.swipeCallback && this.swipeCallback(1, 'right', { ctrlKey: evt.ctrlKey, altKey: evt.altKey, shiftKey: evt.shiftKey, metaKey: evt.metaKey });
            this.swipeParams._moved = true;
          }
        } else {
          if (this.swipeParams._yMove > this.swipeParams._moveThreshold) {
            /* up swipe */
            this.swipeCallback && this.swipeCallback(2, 'up', { ctrlKey: evt.ctrlKey, altKey: evt.altKey, shiftKey: evt.shiftKey, metaKey: evt.metaKey });
            this.swipeParams._moved = true;
          }
          if (this.swipeParams._yMove < -this.swipeParams._moveThreshold) {
            /* down swipe */
            this.swipeCallback && this.swipeCallback(3, 'down', { ctrlKey: evt.ctrlKey, altKey: evt.altKey, shiftKey: evt.shiftKey, metaKey: evt.metaKey });
            this.swipeParams._moved = true;
          }
        }
      }
      this.moveCallback && this.moveCallback(this.swipeParams._xDiff, this.swipeParams._yDiff, this.swipeParams._xVelocity, this.swipeParams._yVelocity, { ctrlKey: evt.ctrlKey, altKey: evt.altKey, shiftKey: evt.shiftKey, metaKey: evt.metaKey });
    },
    _handleEnd(evt) {
      evt.stopPropagation();
      if (evt.touches && evt.touches.length) {
        return;
      }
      this.endCallback && this.endCallback(this.swipeParams._xVelocity, this.swipeParams._yVelocity, { ctrlKey: evt.ctrlKey, altKey: evt.altKey, shiftKey: evt.shiftKey, metaKey: evt.metaKey });
      if (Date.now() - this.swipeParams._touchTime < this.swipeParams._tapTime) {
        if (!this.swipeParams._xMove || this.swipeParams._xMove && Math.abs(this.swipeParams._xMove - this.swipeParams._xDown) < this.swipeParams._tapThreshold && Math.abs(this.swipeParams._yMove - this.swipeParams._yDown) < this.swipeParams._tapThreshold) {
          this.tapCallback && this.tapCallback({ ctrlKey: evt.ctrlKey, altKey: evt.altKey, shiftKey: evt.shiftKey, metaKey: evt.metaKey });
        }
      }
      this._swipeClear();
    }
  },
  mounted() {
    this.$on('mousemove', function () {
      console.log(1);
    });
  }
};

var s_v = { render: function () {
    var _vm = this;var _h = _vm.$createElement;var _c = _vm._self._c || _h;return _c('div', { staticClass: "scrollView" }, [_c('div', { staticClass: "scrollContainer", class: { vertical: _vm.vertical, horizontal: !_vm.vertical, smoothing: _vm.smoothing }, style: { transform: _vm.vertical ? 'translateY(' + -_vm.offsetY + 'px)' : 'translateX(' + -_vm.offsetX + 'px)' }, on: { "touchstart": _vm._handleStart, "touchmove": _vm._handleMove, "touchend": _vm._handleEnd, "touchcancel": _vm._handleEnd, "mousedown": _vm._handleStart, "mousemove": _vm._handleMove, "mouseup": _vm._handleEnd, "mouseleave": _vm._handleEnd } }, [_vm._t("default")], 2)]);
  }, staticRenderFns: [],
  data() {
    return {
      offsetX: 0,
      offsetY: 0,
      smoothing: false
    };
  },
  mixins: [swipe_vue],
  props: ['vertical', 'slots'],
  methods: {
    touchCallback: function () {
      this.smoothing = false;
      //root bounding client
      var rbc = this.$el.getBoundingClientRect();
      //container bounding client
      var cbc = this.$el.children[0].getBoundingClientRect();
      if (this.vertical) {
        this.offsetY = rbc.top - cbc.top;
      } else {
        this.offsetX = rbc.left - cbc.left;
      }
    },
    moveCallback: function (dx, dy) {
      var rbc = this.$el.getBoundingClientRect();
      var cbc = this.$el.children[0].getBoundingClientRect();
      if (this.vertical) {
        this.offsetY -= dy;
        this.offsetY = clip(this.offsetY, 0, cbc.height - rbc.bottom + rbc.top);
      } else {
        this.offsetX -= dx;
        this.offsetX = clip(this.offsetX, 0, cbc.width - rbc.right + rbc.left);
      }
    },
    endCallback: function (vx, vy) {
      if (vx !== 0 || vy !== 0) {
        var rbc = this.$el.getBoundingClientRect();
        var cbc = this.$el.children[0].getBoundingClientRect();
        this.smoothing = true;
        if (this.vertical) {
          this.offsetY -= vy;
          if (this.slots) {
            this.offsetY = findClosest(this.slots, this.offsetY);
          }
          this.offsetY = clip(this.offsetY, 0, cbc.height - rbc.bottom + rbc.top);
        } else {
          this.offsetX -= vx;
          if (this.slots) {
            this.offsetX = findClosest(this.slots, this.offsetX);
          }
          this.offsetX = clip(this.offsetX, 0, cbc.width - rbc.right + rbc.left);
        }
      }
    }
  }
};

var e_l = { render: function () {
    var _vm = this;var _h = _vm.$createElement;var _c = _vm._self._c || _h;return _c('scroll-view', { staticClass: "container", attrs: { "vertical": false } }, _vm._l(_vm.elements, function (element, i) {
      return _c('img', { staticClass: "element", class: { 'elm-selected': _vm.selection == i }, attrs: { "src": element.src, "data-index": i }, on: { "click": function ($event) {
            $event.stopPropagation();_vm.onclick($event);
          }, "touchstart": _vm.onclick } });
    }));
  }, staticRenderFns: [], _scopeId: 'data-v-258faf91',
  props: ['elements', 'selection'],
  methods: {
    onclick(e) {
      var target = e.target.dataset.index;
      this.$emit('select', {
        target: target,
        data: this.elements[target]
      });
    }
  },
  components: {
    'scroll-view': s_v
  }
  // lol overflow: hidden create block context or smh so those 'inline' elms must get middle aligned

};

var s_i = { render: function () {
    var _vm = this;var _h = _vm.$createElement;var _c = _vm._self._c || _h;return _c('div', { staticClass: "slider-wrapper" }, [_c('span', { staticClass: "slider-desc" }, [_vm._v(_vm._s(_vm.name))]), _c('input', { staticClass: "slider-bar", attrs: { "type": "range", "min": _vm.min, "max": _vm.max, "step": _vm.step }, domProps: { "value": _vm.value }, on: { "input": _vm.oninput } }), _c('input', { staticClass: "slider-checker", attrs: { "type": "value", "readonly": "readonly" }, domProps: { "value": _vm.value } })]);
  }, staticRenderFns: [], _scopeId: 'data-v-0bd37e08',
  data() {
    return {};
  },
  props: ['name', 'min', 'max', 'step', 'value'],
  methods: {
    oninput(e) {
      //important
      this.$emit('update:value', e.target.value);
    }
  }
};

// copied from offital Vue examples
var i_p = { render: function () {
    var _vm = this;var _h = _vm.$createElement;var _c = _vm._self._c || _h;return _c('div', { staticClass: "part", attrs: { "id": _vm.name }, on: { "mousedown": _vm.onPartSelected, "touchstart": _vm.onPartSelected } }, [_c('div', [_c('span', { staticClass: "desc" }, [_vm._v(_vm._s(_vm.name) + ":")])]), _c('div', [_c('element-list', { attrs: { "elements": _vm.elements, "selection": _vm.selection }, on: { "select": _vm.onselect } })], 1), _c('div', [_c('slider-input', { staticClass: "options", attrs: { "name": "width", "min": 0, "max": _vm.canvasWidth, "step": 1, "value": _vm.width }, on: { "update:value": function ($event) {
          _vm.width = $event;
        } } }), _c('slider-input', { staticClass: "options", attrs: { "name": "height", "min": 0, "max": _vm.canvasHeight, "step": 1, "value": _vm.height }, on: { "update:value": function ($event) {
          _vm.height = $event;
        } } })], 1), _c('div', [_c('slider-input', { staticClass: "options", attrs: { "name": "x", "min": -_vm.canvasWidth / 2, "max": _vm.canvasWidth / 2, "step": 1, "value": _vm.x }, on: { "update:value": function ($event) {
          _vm.x = $event;
        } } }), _c('slider-input', { staticClass: "options", attrs: { "name": "y", "min": -_vm.canvasHeight / 2, "max": _vm.canvasHeight / 2, "step": 1, "value": _vm.y }, on: { "update:value": function ($event) {
          _vm.y = $event;
        } } })], 1), _c('div', [_c('slider-input', { staticClass: "options", attrs: { "name": "rotation", "min": -180, "max": 180, "step": 1, "value": _vm.rotation }, on: { "update:value": function ($event) {
          _vm.rotation = $event;
        } } }), _c('span', { staticClass: "desc" }, [_vm._v("镜像")]), _c('input', { directives: [{ name: "model", rawName: "v-model", value: _vm.mirror, expression: "mirror" }], attrs: { "type": "checkbox" }, domProps: { "checked": Array.isArray(_vm.mirror) ? _vm._i(_vm.mirror, null) > -1 : _vm.mirror }, on: { "__c": function ($event) {
          var $$a = _vm.mirror,
              $$el = $event.target,
              $$c = $$el.checked ? true : false;if (Array.isArray($$a)) {
            var $$v = null,
                $$i = _vm._i($$a, $$v);if ($$el.checked) {
              $$i < 0 && (_vm.mirror = $$a.concat($$v));
            } else {
              $$i > -1 && (_vm.mirror = $$a.slice(0, $$i).concat($$a.slice($$i + 1)));
            }
          } else {
            _vm.mirror = $$c;
          }
        } } }), _c('span', { staticClass: "desc" }, [_vm._v("保持比例")]), _c('input', { directives: [{ name: "model", rawName: "v-model", value: _vm.keepAspect, expression: "keepAspect" }], attrs: { "type": "checkbox" }, domProps: { "checked": Array.isArray(_vm.keepAspect) ? _vm._i(_vm.keepAspect, null) > -1 : _vm.keepAspect }, on: { "change": function ($event) {
          _vm.aspectRatio = _vm.width / _vm.height;
        }, "__c": function ($event) {
          var $$a = _vm.keepAspect,
              $$el = $event.target,
              $$c = $$el.checked ? true : false;if (Array.isArray($$a)) {
            var $$v = null,
                $$i = _vm._i($$a, $$v);if ($$el.checked) {
              $$i < 0 && (_vm.keepAspect = $$a.concat($$v));
            } else {
              $$i > -1 && (_vm.keepAspect = $$a.slice(0, $$i).concat($$a.slice($$i + 1)));
            }
          } else {
            _vm.keepAspect = $$c;
          }
        } } })], 1)]);
  }, staticRenderFns: [], _scopeId: 'data-v-bba94232',
  props: ['name', 'elements'],
  data() {
    return {
      category: this.name.slice(0, -1),
      index: this.name.slice(-1),
      keepAspect: true,
      aspectRatio: 1,
      canvasWidth: canvasWidth,
      canvasHeight: canvasHeight
    };
  },
  methods: {
    onselect: function (e) {
      this.selection = e.target;
      this.width = e.data.width;
      this.height = e.data.height;
      this.x = e.data.x;
      this.y = e.data.y;
      this.rotation = e.data.rotation;
      this.mirror = e.data.mirror;
      this.onPartSelected();
      this.aspectRatio = e.data.width / e.data.height;
    },
    onPartSelected: function (e) {
      this.$el.focus();
      this.$emit('focused', this.name);
    }
  },
  computed: {
    selection: {
      get() {
        return this.$store.state[this.category][this.index].selection;
      },
      set(value) {
        this.$store.commit('select', { category: this.category, index: this.index, value: +value });
        this.$emit('changed');
      }
    },
    width: {
      get() {
        return this.$store.state[this.category][this.index].params.width;
      },
      set(value) {
        this.$store.commit('setParam', { category: this.category, index: this.index, param: 'width', value: +value });
        if (this.keepAspect) {
          this.$store.commit('setParam', { category: this.category, index: this.index, param: 'height', value: value / this.aspectRatio });
        }
        this.$emit('changed');
      }
    },
    height: {
      get() {
        return this.$store.state[this.category][this.index].params.height;
      },
      set(value) {
        this.$store.commit('setParam', { category: this.category, index: this.index, param: 'height', value: +value });
        if (this.keepAspect) {
          this.$store.commit('setParam', { category: this.category, index: this.index, param: 'width', value: value * this.aspectRatio });
        }
        this.$emit('changed');
      }
    },
    x: {
      get() {
        return this.$store.state[this.category][this.index].params.x;
      },
      set(value) {
        this.$store.commit('setParam', { category: this.category, index: this.index, param: 'x', value: +value });
        this.$emit('changed');
      }
    },
    y: {
      get() {
        return this.$store.state[this.category][this.index].params.y;
      },
      set(value) {
        this.$store.commit('setParam', { category: this.category, index: this.index, param: 'y', value: +value });
        this.$emit('changed');
      }
    },
    rotation: {
      get() {
        return this.$store.state[this.category][this.index].params.rotation;
      },
      set(value) {
        this.$store.commit('setParam', { category: this.category, index: this.index, param: 'rotation', value: +value });
        this.$emit('changed');
      }
    },
    mirror: {
      get() {
        return this.$store.state[this.category][this.index].params.mirror;
      },
      set(value) {
        this.$store.commit('setParam', { category: this.category, index: this.index, param: 'mirror', value: +value });
        this.$emit('changed');
      }
    }
  },
  components: {
    'slider-input': s_i
  },
  mounted() {
    this.aspectRatio = this.selection !== null && this.width / this.height;
  }
};

var t_i = { render: function () {
    var _vm = this;var _h = _vm.$createElement;var _c = _vm._self._c || _h;return _c('div', { staticClass: "text-wrapper" }, [_c('span', { staticClass: "text-desc" }, [_vm._v(_vm._s(_vm.name))]), _c('input', { staticClass: "text-input", attrs: { "type": "text", "min": _vm.min, "max": _vm.max, "step": _vm.step }, domProps: { "value": _vm.value }, on: { "input": _vm.oninput } })]);
  }, staticRenderFns: [], _scopeId: 'data-v-fa09c770',
  data() {
    return {};
  },
  props: ['name', 'value'],
  methods: {
    oninput(e) {
      //important
      this.$emit('update:value', e.target.value);
    }
  }
};

// copied from offital Vue examples
var t_p = { render: function () {
    var _vm = this;var _h = _vm.$createElement;var _c = _vm._self._c || _h;return _c('div', { staticClass: "part", attrs: { "id": _vm.name }, on: { "mousedown": _vm.onPartSelected, "touchstart": _vm.onPartSelected } }, [_c('div', [_c('text-input', { staticClass: "options", attrs: { "name": _vm.name, "value": _vm.context }, on: { "update:value": function ($event) {
          _vm.context = $event;
        } } })], 1), _c('div', [_c('slider-input', { staticClass: "options", attrs: { "name": "size", "min": 0, "max": _vm.canvasHeight, "step": 1, "value": _vm.size }, on: { "update:value": function ($event) {
          _vm.size = $event;
        } } }), _c('div'), _c('slider-input', { staticClass: "options", attrs: { "name": "x", "min": -_vm.canvasWidth / 2, "max": _vm.canvasWidth / 2, "step": 1, "value": _vm.x }, on: { "update:value": function ($event) {
          _vm.x = $event;
        } } }), _c('slider-input', { staticClass: "options", attrs: { "name": "y", "min": -_vm.canvasHeight / 2, "max": _vm.canvasHeight / 2, "step": 1, "value": _vm.y }, on: { "update:value": function ($event) {
          _vm.y = $event;
        } } })], 1), _c('div', [_c('slider-input', { staticClass: "options", attrs: { "name": "rotation", "min": -180, "max": 180, "step": 1, "value": _vm.rotation }, on: { "update:value": function ($event) {
          _vm.rotation = $event;
        } } }), _c('span', { staticClass: "desc" }, [_vm._v("镜像")]), _c('input', { directives: [{ name: "model", rawName: "v-model", value: _vm.mirror, expression: "mirror" }], attrs: { "type": "checkbox" }, domProps: { "checked": Array.isArray(_vm.mirror) ? _vm._i(_vm.mirror, null) > -1 : _vm.mirror }, on: { "__c": function ($event) {
          var $$a = _vm.mirror,
              $$el = $event.target,
              $$c = $$el.checked ? true : false;if (Array.isArray($$a)) {
            var $$v = null,
                $$i = _vm._i($$a, $$v);if ($$el.checked) {
              $$i < 0 && (_vm.mirror = $$a.concat($$v));
            } else {
              $$i > -1 && (_vm.mirror = $$a.slice(0, $$i).concat($$a.slice($$i + 1)));
            }
          } else {
            _vm.mirror = $$c;
          }
        } } })], 1)]);
  }, staticRenderFns: [], _scopeId: 'data-v-ec772d36',
  props: ['name'],
  data() {
    return {
      category: this.name.slice(0, -1),
      index: this.name.slice(-1),
      canvasWidth: canvasWidth,
      canvasHeight: canvasHeight
    };
  },
  methods: {
    onPartSelected: function (e) {
      this.$el.focus();
      this.$emit('focused', this.name);
    }
  },
  computed: {
    context: {
      get() {
        return this.$store.state[this.category][this.index].context;
      },
      set(value) {
        this.$store.commit('contextChange', { index: this.index, value: value });
        this.$emit('changed');
      }
    },
    size: {
      get() {
        return this.$store.state[this.category][this.index].params.size;
      },
      set(value) {
        this.$store.commit('setParam', { category: this.category, index: this.index, param: 'size', value: +value });
        this.$emit('changed');
      }
    },
    x: {
      get() {
        return this.$store.state[this.category][this.index].params.x;
      },
      set(value) {
        this.$store.commit('setParam', { category: this.category, index: this.index, param: 'x', value: +value });
        this.$emit('changed');
      }
    },
    y: {
      get() {
        return this.$store.state[this.category][this.index].params.y;
      },
      set(value) {
        this.$store.commit('setParam', { category: this.category, index: this.index, param: 'y', value: +value });
        this.$emit('changed');
      }
    },
    rotation: {
      get() {
        return this.$store.state[this.category][this.index].params.rotation;
      },
      set(value) {
        this.$store.commit('setParam', { category: this.category, index: this.index, param: 'rotation', value: +value });
        this.$emit('changed');
      }
    },
    mirror: {
      get() {
        return this.$store.state[this.category][this.index].params.mirror;
      },
      set(value) {
        this.$store.commit('setParam', { category: this.category, index: this.index, param: 'mirror', value: +value });
        this.$emit('changed');
      }
    }
  },
  components: {
    'slider-input': s_i,
    'text-input': t_i
  }
};

var o_p = { render: function () {
    var _vm = this;var _h = _vm.$createElement;var _c = _vm._self._c || _h;return _c('div', { staticClass: "outputContainer" }, [_c('img', { staticClass: "output", attrs: { "src": _vm.rendered } }), _c('slider-input', { staticClass: "options", attrs: { "name": "padding", "min": 0, "max": 50, "step": 1, "value": _vm.padding }, on: { "update:value": function ($event) {
          _vm.padding = $event;
        } } }), _c('slider-input', { staticClass: "options", attrs: { "name": "scale", "min": 0, "max": 2, "step": 0.01, "value": _vm.scale }, on: { "update:value": function ($event) {
          _vm.scale = $event;
        } } }), _c('slider-input', { staticClass: "options", attrs: { "name": "quality", "min": 0, "max": 100, "step": 1, "value": _vm.quality }, on: { "update:value": function ($event) {
          _vm.quality = $event;
        } } }), _c('slider-input', { staticClass: "options", attrs: { "name": "iteration", "min": 0, "max": 64, "step": 1, "value": _vm.iteration }, on: { "update:value": function ($event) {
          _vm.iteration = $event;
        } } }), _c('canvas', { staticStyle: { "display": "none" }, attrs: { "id": "invisible" } })], 1);
  }, staticRenderFns: [], _scopeId: 'data-v-4d6d3bde',
  data() {
    return {
      rendered: '',
      currentIteration: 0,
      finished: true
    };
  },
  methods: {
    clamp: function (x) {
      if (x < 0) {
        return 0;
      }
      if (x > 255) {
        return 255;
      }
      return x;
    },
    clampuv: function (x) {
      if (x < -128) {
        return -128;
      }
      if (x > 127) {
        return 127;
      }
      return x;
    },
    iter: function (canvas) {
      return new Promise(resolve => {
        var img = new Image();
        img.onload = function () {
          canvas.getContext('2d').drawImage(this, 0, 0, canvas.width, canvas.height);
          resolve();
        };
        var imageData = canvas.getContext('2d').getImageData(0, 0, canvas.width, canvas.height);
        var data = imageData.data;
        for (let p = 0; p < data.length / 4; ++p) {
          const r = data[p * 4];
          const g = data[p * 4 + 1];
          const b = data[p * 4 + 2];
          const y = this.clamp(77 * r + 150 * g + 29 * b >> 8);
          const u = this.clampuv((-43 * r - 85 * g + 128 * b >> 8) - 1);
          const v = this.clampuv((128 * r - 107 * g - 21 * b >> 8) - 1);
          const r1 = this.clamp(65536 * y + 91881 * v >> 16);
          const g1 = this.clamp(65536 * y - 22553 * u - 46802 * v >> 16);
          const b1 = this.clamp(65536 * y + 116130 * u >> 16);
          data[p * 4] = r1;
          data[p * 4 + 1] = g1;
          data[p * 4 + 2] = b1;
        }
        canvas.getContext('2d').putImageData(imageData, 0, 0);
        img.src = canvas.toDataURL("image/jpeg", this.$store.state.output.quality / 100);
      });
    },
    output: async function () {
      if (this.currentIteration < this.$store.state.output.iteration) {
        this.currentIteration++;

        var inv = this.$el.querySelector('#invisible');

        await this.iter(inv);

        this.rendered = inv.toDataURL();

        requestAnimationFrame(this.output);
      } else {
        this.finished = true;
      }
    },
    reset: function () {
      var canvas = document.querySelector('#canvas');
      var inv = this.$el.querySelector('#invisible');

      inv.width = this.$store.state.output.scale * (this.$store.state.output.region.right - this.$store.state.output.region.left) + this.$store.state.output.padding * 2;
      inv.height = this.$store.state.output.scale * (this.$store.state.output.region.bottom - this.$store.state.output.region.top) + this.$store.state.output.padding * 2;
      inv.getContext('2d').drawImage(canvas, canvas.width / 2 + this.$store.state.output.region.left - this.$store.state.output.padding, canvas.height / 2 + this.$store.state.output.region.top - this.$store.state.output.padding, this.$store.state.output.region.right - this.$store.state.output.region.left + this.$store.state.output.padding * 2, this.$store.state.output.region.bottom - this.$store.state.output.region.top + this.$store.state.output.padding * 2, 0, 0, inv.width, inv.height);

      this.currentIteration = 0;
      if (this.finished) {
        this.finished = false;
        this.output();
      }
    }
  },
  computed: {
    padding: {
      get() {
        return this.$store.state.output.padding;
      },
      set(value) {
        this.$store.commit('updatePadding', +value);
        this.reset();
      }
    },
    scale: {
      get() {
        return this.$store.state.output.scale;
      },
      set(value) {
        this.$store.commit('updateScale', +value);
        this.reset();
      }
    },
    quality: {
      get() {
        return this.$store.state.output.quality;
      },
      set(value) {
        this.$store.commit('updateQuality', +value);
        this.reset();
      }
    },
    iteration: {
      get() {
        return this.$store.state.output.iteration;
      },
      set(value) {
        this.$store.commit('updateIteration', +value);
        this.reset();
      }
    }
  },
  components: {
    'slider-input': s_i
  },
  mounted() {
    this.reset();
  }
};

Vue.component('modal', m);

Vue.component('folder', f);

Vue.component('scroll-view', s_v);

Vue.component('element-list', e_l);

Vue.component('image-part', i_p);

Vue.component('text-part', t_p);

Vue.component('output-part', o_p);

function _init(target, touchCallback, moveCallback, endCallback, swipeCallback, tapCallback, _moveThreshold) {
  target.addEventListener('touchstart', handleTouchStart, { passive: false });
  target.addEventListener('touchmove', handleTouchMove, { passive: false });
  target.addEventListener('touchend', handleTouchEnd, { passive: false });
  target.addEventListener('touchcancel', handleTouchEnd, { passive: false });
  target.addEventListener('mousedown', handleTouchStart, { passive: false });
  target.addEventListener('mousemove', handleTouchMove, { passive: false });
  target.addEventListener('mouseup', handleTouchEnd, { passive: false });
  target.addEventListener('mouseleave', handleTouchEnd, { passive: false });
  target.addEventListener('wheel', handleWheel, { passive: false });

  var moveThreshold = _moveThreshold * target.getBoundingClientRect().width || 0.2 * target.getBoundingClientRect().width;
  var tapThreshold = 15;
  var tapTime = 1000;
  var xDown = null;
  var yDown = null;
  var xPrev = null;
  var yPrev = null;
  var xUp = null;
  var yUp = null;
  var xMove = null;
  var yMove = null;
  var xDiff = null;
  var yDiff = null;
  var touchTime = null;
  var xVelocity = null;
  var yVelocity = null;
  var moveTime = null;

  function clear() {
    xDown = null;
    yDown = null;
    xPrev = null;
    yPrev = null;
    xUp = null;
    yUp = null;
    xMove = null;
    yMove = null;
    xDiff = null;
    yDiff = null;
    touchTime = null;
    xVelocity = 0;
    yVelocity = 0;
    moveTime = null;
  }

  function handleTouchStart(evt) {
    evt.preventDefault();
    evt.stopPropagation();
    if (xDown || yDown) {
      return;
    }
    xDown = evt.clientX || evt.touches[0].clientX;
    yDown = evt.clientY || evt.touches[0].clientY;
    xPrev = xDown;
    yPrev = yDown;
    xVelocity = 0;
    yVelocity = 0;
    touchTime = Date.now();
    moveTime = Date.now();
    touchCallback && touchCallback({ ctrlKey: evt.ctrlKey, altKey: evt.altKey, shiftKey: evt.shiftKey, metaKey: evt.metaKey });
  }

  function handleTouchMove(evt) {
    evt.preventDefault();
    evt.stopPropagation();
    if (!xDown || !yDown) {
      return;
    }

    xPrev = xUp || xPrev;
    yPrev = yUp || yPrev;

    xUp = evt.clientX || evt.touches[0].clientX;
    yUp = evt.clientY || evt.touches[0].clientY;

    xMove = xDown - xUp;
    yMove = yDown - yUp;
    xDiff = xUp - xPrev;
    yDiff = yUp - yPrev;
    xVelocity = 0.8 * 1000 * xDiff / (1 + Date.now() - moveTime) + 0.2 * xVelocity;
    yVelocity = 0.8 * 1000 * yDiff / (1 + Date.now() - moveTime) + 0.2 * yVelocity;

    if (Math.abs(xMove) > Math.abs(yMove)) {
      /*most significant*/
      if (xMove > moveThreshold) {
        /* left swipe */
        swipeCallback && swipeCallback(0, 'left', { ctrlKey: evt.ctrlKey, altKey: evt.altKey, shiftKey: evt.shiftKey, metaKey: evt.metaKey });
        clear();
      }
      if (xMove < -moveThreshold) {
        /* right swipe */
        swipeCallback && swipeCallback(1, 'right', { ctrlKey: evt.ctrlKey, altKey: evt.altKey, shiftKey: evt.shiftKey, metaKey: evt.metaKey });
        clear();
      }
    } else {
      if (yMove > moveThreshold) {
        /* up swipe */
        swipeCallback && swipeCallback(2, 'up', { ctrlKey: evt.ctrlKey, altKey: evt.altKey, shiftKey: evt.shiftKey, metaKey: evt.metaKey });
        clear();
      }
      if (yMove < -moveThreshold) {
        /* down swipe */
        swipeCallback && swipeCallback(3, 'down', { ctrlKey: evt.ctrlKey, altKey: evt.altKey, shiftKey: evt.shiftKey, metaKey: evt.metaKey });
        clear();
      }
    }
    moveCallback && moveCallback(xDiff, yDiff, xVelocity, yVelocity, { ctrlKey: evt.ctrlKey, altKey: evt.altKey, shiftKey: evt.shiftKey, metaKey: evt.metaKey });
  }

  function handleTouchEnd(evt) {
    evt.stopPropagation();
    if (evt.touches && evt.touches.length) {
      return;
    }
    endCallback && endCallback(xVelocity, yVelocity, { ctrlKey: evt.ctrlKey, altKey: evt.altKey, shiftKey: evt.shiftKey, metaKey: evt.metaKey });
    if (Date.now() - touchTime < tapTime) {
      if (!xMove || xMove && Math.abs(xMove - xDown) < tapThreshold && Math.abs(yMove - yDown) < tapThreshold) {
        tapCallback && tapCallback({ ctrlKey: evt.ctrlKey, altKey: evt.altKey, shiftKey: evt.shiftKey, metaKey: evt.metaKey });
      }
    }
    clear();
  }
  function handleWheel(evt) {
    // use evt.wheelDeltaY to handle wheel
    // on this computer unit is 120
    // wheel += evt.wheelDeltaY;
    // console.log('wheel', wheel);
  }
}
var swipe = {
  init: _init
};

var swipeMixin = {
  methods: {
    swipeHandler: function (op, text) {
      // console.log('op', op, 'text', text);
    },
    moveHandler: function (dx, dy, vx, vy, mods) {
      this.$store.state[this.activePart.slice(0, -1)][this.activePart.slice(-1)];
      if (this.$store.state[this.activePart.slice(0, -1)][this.activePart.slice(-1)].selection !== null) {
        if (mods.ctrlKey || mods.metaKey) {
          this.$store.state[this.activePart.slice(0, -1)][this.activePart.slice(-1)].params.width -= -dx;
          this.$store.state[this.activePart.slice(0, -1)][this.activePart.slice(-1)].params.height -= -dy;
        } else {
          this.$store.state[this.activePart.slice(0, -1)][this.activePart.slice(-1)].params.x -= -dx;
          this.$store.state[this.activePart.slice(0, -1)][this.activePart.slice(-1)].params.y -= -dy;
        }
      }
      this.redraw();
    },
    touchHandler: function () {
      // console.log('touched');
    },
    endHandler: function () {
      // console.log('ended');
    },
    tapHandler: function () {
      // console.log('tapped');
    }
  },
  mounted: function () {
    swipe.init(document.querySelector('#canvas'), this.touchHandler, this.moveHandler, this.endHandler, this.swipeHandler, this.tapHandler, 10);
  }
};

/**!
* Sortable
* @author  RubaXa   <trash@rubaxa.org>
* @license MIT
*/

/**!
* Sortable.esm
* @editor  lzqyydy
*/

if (typeof window == "undefined" || !window.document) {
  throw new Error("Sortable.js requires a window with a document");
}

var dragEl;
var parentEl;
var ghostEl;
var cloneEl;
var rootEl;
var nextEl;
var lastDownEl;
var scrollEl;
var scrollParentEl;
var scrollCustomFn;
var lastEl;
var lastCSS;
var lastParentCSS;
var oldIndex;
var newIndex;
var activeGroup;
var putSortable;
var autoScroll = {};
var tapEvt;
var touchEvt;
var moved;
var R_SPACE = /\s+/g;
var R_FLOAT = /left|right|inline/;
var expando = 'Sortable' + new Date().getTime();
var win = window;
var document$1 = win.document;
var parseInt = win.parseInt;
var $ = win.jQuery || win.Zepto;
var Polymer = win.Polymer;
var captureMode = false;
var supportDraggable = !!('draggable' in document$1.createElement('div'));
var supportCssPointerEvents = function (el) {
  // false when IE11
  if (!!navigator.userAgent.match(/Trident.*rv[ :]?11\./)) {
    return false;
  }
  el = document$1.createElement('x');
  el.style.cssText = 'pointer-events:auto';
  return el.style.pointerEvents === 'auto';
}();
var _silent = false;
var abs = Math.abs;
var min = Math.min;
var savedInputChecked = [];
var touchDragOverListeners = [];
var _autoScroll = _throttle(function ( /**Event*/evt, /**Object*/options, /**HTMLElement*/rootEl) {
  // Bug: https://bugzilla.mozilla.org/show_bug.cgi?id=505521
  if (rootEl && options.scroll) {
    var _this = rootEl[expando],
        el,
        rect,
        sens = options.scrollSensitivity,
        speed = options.scrollSpeed,
        x = evt.clientX,
        y = evt.clientY,
        winWidth = window.innerWidth,
        winHeight = window.innerHeight,
        vx,
        vy,
        scrollOffsetX,
        scrollOffsetY;

    // Delect scrollEl
    if (scrollParentEl !== rootEl) {
      scrollEl = options.scroll;
      scrollParentEl = rootEl;
      scrollCustomFn = options.scrollFn;

      if (scrollEl === true) {
        scrollEl = rootEl;

        do {
          if (scrollEl.offsetWidth < scrollEl.scrollWidth || scrollEl.offsetHeight < scrollEl.scrollHeight) {
            break;
          }
          /* jshint boss:true */
        } while (scrollEl = scrollEl.parentNode);
      }
    }

    if (scrollEl) {
      el = scrollEl;
      rect = scrollEl.getBoundingClientRect();
      vx = (abs(rect.right - x) <= sens) - (abs(rect.left - x) <= sens);
      vy = (abs(rect.bottom - y) <= sens) - (abs(rect.top - y) <= sens);
    }

    if (!(vx || vy)) {
      vx = (winWidth - x <= sens) - (x <= sens);
      vy = (winHeight - y <= sens) - (y <= sens);

      /* jshint expr:true */
      (vx || vy) && (el = win);
    }

    if (autoScroll.vx !== vx || autoScroll.vy !== vy || autoScroll.el !== el) {
      autoScroll.el = el;
      autoScroll.vx = vx;
      autoScroll.vy = vy;

      clearInterval(autoScroll.pid);

      if (el) {
        autoScroll.pid = setInterval(function () {
          scrollOffsetY = vy ? vy * speed : 0;
          scrollOffsetX = vx ? vx * speed : 0;

          if ('function' === typeof scrollCustomFn) {
            return scrollCustomFn.call(_this, scrollOffsetX, scrollOffsetY, evt);
          }

          if (el === win) {
            win.scrollTo(win.pageXOffset + scrollOffsetX, win.pageYOffset + scrollOffsetY);
          } else {
            el.scrollTop += scrollOffsetY;
            el.scrollLeft += scrollOffsetX;
          }
        }, 24);
      }
    }
  }
}, 30);
var _prepareGroup = function (options) {
  function toFn(value, pull) {
    if (value === void 0 || value === true) {
      value = group.name;
    }

    if (typeof value === 'function') {
      return value;
    } else {
      return function (to, from) {
        var fromGroup = from.options.group.name;

        return pull ? value : value && (value.join ? value.indexOf(fromGroup) > -1 : fromGroup == value);
      };
    }
  }

  var group = {};
  var originalGroup = options.group;

  if (!originalGroup || typeof originalGroup != 'object') {
    originalGroup = { name: originalGroup };
  }

  group.name = originalGroup.name;
  group.checkPull = toFn(originalGroup.pull, true);
  group.checkPut = toFn(originalGroup.put);
  group.revertClone = originalGroup.revertClone;

  options.group = group;
};

/**
 * @class  Sortable
 * @param  {HTMLElement}  el
 * @param  {Object}       [options]
 */
function Sortable(el, options) {
  if (!(el && el.nodeType && el.nodeType === 1)) {
    throw 'Sortable: `el` must be HTMLElement, and not ' + {}.toString.call(el);
  }

  this.el = el; // root element
  this.options = options = _extend({}, options);

  // Export instance
  el[expando] = this;

  // Default options
  var defaults = {
    group: Math.random(),
    sort: true,
    disabled: false,
    store: null,
    handle: null,
    scroll: true,
    scrollSensitivity: 30,
    scrollSpeed: 10,
    draggable: /[uo]l/i.test(el.nodeName) ? 'li' : '>*',
    ghostClass: 'sortable-ghost',
    chosenClass: 'sortable-chosen',
    dragClass: 'sortable-drag',
    ignore: 'a, img',
    filter: null,
    preventOnFilter: true,
    animation: 0,
    setData: function (dataTransfer, dragEl) {
      dataTransfer.setData('Text', dragEl.textContent);
    },
    dropBubble: false,
    dragoverBubble: false,
    dataIdAttr: 'data-id',
    delay: 0,
    forceFallback: false,
    fallbackClass: 'sortable-fallback',
    fallbackOnBody: false,
    fallbackTolerance: 0,
    fallbackOffset: { x: 0, y: 0 }
  };

  // Set default options
  for (var name in defaults) {
    !(name in options) && (options[name] = defaults[name]);
  }

  _prepareGroup(options);

  // Bind all private methods
  for (var fn in this) {
    if (fn.charAt(0) === '_' && typeof this[fn] === 'function') {
      this[fn] = this[fn].bind(this);
    }
  }

  // Setup drag mode
  this.nativeDraggable = options.forceFallback ? false : supportDraggable;

  // Bind events
  _on(el, 'mousedown', this._onTapStart);
  _on(el, 'touchstart', this._onTapStart);
  _on(el, 'pointerdown', this._onTapStart);

  if (this.nativeDraggable) {
    _on(el, 'dragover', this);
    _on(el, 'dragenter', this);
  }

  touchDragOverListeners.push(this._onDragOver);

  // Restore sorting
  options.store && this.sort(options.store.get(this));
}

Sortable.prototype = /** @lends Sortable.prototype */{
  constructor: Sortable,

  _onTapStart: function ( /** Event|TouchEvent */evt) {
    var _this = this,
        el = this.el,
        options = this.options,
        preventOnFilter = options.preventOnFilter,
        type = evt.type,
        touch = evt.touches && evt.touches[0],
        target = (touch || evt).target,
        originalTarget = evt.target.shadowRoot && evt.path[0] || target,
        filter = options.filter,
        startIndex;

    _saveInputCheckedState(el);

    // Don't trigger start event when an element is been dragged, otherwise the evt.oldindex always wrong when set option.group.
    if (dragEl) {
      return;
    }

    if (type === 'mousedown' && evt.button !== 0 || options.disabled) {
      return; // only left button or enabled
    }

    target = _closest(target, options.draggable, el);

    if (!target) {
      return;
    }

    if (lastDownEl === target) {
      // Ignoring duplicate `down`
      return;
    }

    // Get the index of the dragged element within its parent
    startIndex = _index(target, options.draggable);

    // Check filter
    if (typeof filter === 'function') {
      if (filter.call(this, evt, target, this)) {
        _dispatchEvent(_this, originalTarget, 'filter', target, el, startIndex);
        preventOnFilter && evt.preventDefault();
        return; // cancel dnd
      }
    } else if (filter) {
      filter = filter.split(',').some(function (criteria) {
        criteria = _closest(originalTarget, criteria.trim(), el);

        if (criteria) {
          _dispatchEvent(_this, criteria, 'filter', target, el, startIndex);
          return true;
        }
      });

      if (filter) {
        preventOnFilter && evt.preventDefault();
        return; // cancel dnd
      }
    }

    if (options.handle && !_closest(originalTarget, options.handle, el)) {
      return;
    }

    // Prepare `dragstart`
    this._prepareDragStart(evt, touch, target, startIndex);
  },

  _prepareDragStart: function ( /** Event */evt, /** Touch */touch, /** HTMLElement */target, /** Number */startIndex) {
    var _this = this,
        el = _this.el,
        options = _this.options,
        ownerDocument = el.ownerDocument,
        dragStartFn;

    if (target && !dragEl && target.parentNode === el) {
      tapEvt = evt;

      rootEl = el;
      dragEl = target;
      parentEl = dragEl.parentNode;
      nextEl = dragEl.nextSibling;
      lastDownEl = target;
      activeGroup = options.group;
      oldIndex = startIndex;

      this._lastX = (touch || evt).clientX;
      this._lastY = (touch || evt).clientY;

      dragEl.style['will-change'] = 'transform';

      dragStartFn = function () {
        // Delayed drag has been triggered
        // we can re-enable the events: touchmove/mousemove
        _this._disableDelayedDrag();

        // Make the element draggable
        dragEl.draggable = _this.nativeDraggable;

        // Chosen item
        _toggleClass(dragEl, options.chosenClass, true);

        // Bind the events: dragstart/dragend
        _this._triggerDragStart(evt, touch);

        // Drag start event
        _dispatchEvent(_this, rootEl, 'choose', dragEl, rootEl, oldIndex);
      };

      // Disable "draggable"
      options.ignore.split(',').forEach(function (criteria) {
        _find(dragEl, criteria.trim(), _disableDraggable);
      });

      _on(ownerDocument, 'mouseup', _this._onDrop);
      _on(ownerDocument, 'touchend', _this._onDrop);
      _on(ownerDocument, 'touchcancel', _this._onDrop);
      _on(ownerDocument, 'pointercancel', _this._onDrop);
      _on(ownerDocument, 'selectstart', _this);

      if (options.delay) {
        // If the user moves the pointer or let go the click or touch
        // before the delay has been reached:
        // disable the delayed drag
        _on(ownerDocument, 'mouseup', _this._disableDelayedDrag);
        _on(ownerDocument, 'touchend', _this._disableDelayedDrag);
        _on(ownerDocument, 'touchcancel', _this._disableDelayedDrag);
        _on(ownerDocument, 'mousemove', _this._disableDelayedDrag);
        _on(ownerDocument, 'touchmove', _this._disableDelayedDrag);
        _on(ownerDocument, 'pointermove', _this._disableDelayedDrag);

        _this._dragStartTimer = setTimeout(dragStartFn, options.delay);
      } else {
        dragStartFn();
      }
    }
  },

  _disableDelayedDrag: function () {
    var ownerDocument = this.el.ownerDocument;

    clearTimeout(this._dragStartTimer);
    _off(ownerDocument, 'mouseup', this._disableDelayedDrag);
    _off(ownerDocument, 'touchend', this._disableDelayedDrag);
    _off(ownerDocument, 'touchcancel', this._disableDelayedDrag);
    _off(ownerDocument, 'mousemove', this._disableDelayedDrag);
    _off(ownerDocument, 'touchmove', this._disableDelayedDrag);
    _off(ownerDocument, 'pointermove', this._disableDelayedDrag);
  },

  _triggerDragStart: function ( /** Event */evt, /** Touch */touch) {
    touch = touch || (evt.pointerType == 'touch' ? evt : null);

    if (touch) {
      // Touch device support
      tapEvt = {
        target: dragEl,
        clientX: touch.clientX,
        clientY: touch.clientY
      };

      this._onDragStart(tapEvt, 'touch');
    } else if (!this.nativeDraggable) {
      this._onDragStart(tapEvt, true);
    } else {
      _on(dragEl, 'dragend', this);
      _on(rootEl, 'dragstart', this._onDragStart);
    }

    try {
      if (document$1.selection) {
        // Timeout neccessary for IE9
        setTimeout(function () {
          document$1.selection.empty();
        });
      } else {
        window.getSelection().removeAllRanges();
      }
    } catch (err) {}
  },

  _dragStarted: function () {
    if (rootEl && dragEl) {
      var options = this.options;

      // Apply effect
      _toggleClass(dragEl, options.ghostClass, true);
      _toggleClass(dragEl, options.dragClass, false);

      Sortable.active = this;

      // Drag start event
      _dispatchEvent(this, rootEl, 'start', dragEl, rootEl, oldIndex);
    } else {
      this._nulling();
    }
  },

  _emulateDragOver: function () {
    if (touchEvt) {
      if (this._lastX === touchEvt.clientX && this._lastY === touchEvt.clientY) {
        return;
      }

      this._lastX = touchEvt.clientX;
      this._lastY = touchEvt.clientY;

      if (!supportCssPointerEvents) {
        _css(ghostEl, 'display', 'none');
      }

      var target = document$1.elementFromPoint(touchEvt.clientX, touchEvt.clientY),
          parent = target,
          i = touchDragOverListeners.length;

      if (parent) {
        do {
          if (parent[expando]) {
            while (i--) {
              touchDragOverListeners[i]({
                clientX: touchEvt.clientX,
                clientY: touchEvt.clientY,
                target: target,
                rootEl: parent
              });
            }

            break;
          }

          target = parent; // store last element
        }
        /* jshint boss:true */
        while (parent = parent.parentNode);
      }

      if (!supportCssPointerEvents) {
        _css(ghostEl, 'display', '');
      }
    }
  },

  _onTouchMove: function ( /**TouchEvent*/evt) {
    if (tapEvt) {
      var options = this.options,
          fallbackTolerance = options.fallbackTolerance,
          fallbackOffset = options.fallbackOffset,
          touch = evt.touches ? evt.touches[0] : evt,
          dx = touch.clientX - tapEvt.clientX + fallbackOffset.x,
          dy = touch.clientY - tapEvt.clientY + fallbackOffset.y,
          translate3d = evt.touches ? 'translate3d(' + dx + 'px,' + dy + 'px,0)' : 'translate(' + dx + 'px,' + dy + 'px)';

      // only set the status to dragging, when we are actually dragging
      if (!Sortable.active) {
        if (fallbackTolerance && min(abs(touch.clientX - this._lastX), abs(touch.clientY - this._lastY)) < fallbackTolerance) {
          return;
        }

        this._dragStarted();
      }

      // as well as creating the ghost element on the document body
      this._appendGhost();

      moved = true;
      touchEvt = touch;

      _css(ghostEl, 'webkitTransform', translate3d);
      _css(ghostEl, 'mozTransform', translate3d);
      _css(ghostEl, 'msTransform', translate3d);
      _css(ghostEl, 'transform', translate3d);

      evt.preventDefault();
    }
  },

  _appendGhost: function () {
    if (!ghostEl) {
      var rect = dragEl.getBoundingClientRect(),
          css = _css(dragEl),
          options = this.options,
          ghostRect;

      ghostEl = dragEl.cloneNode(true);

      _toggleClass(ghostEl, options.ghostClass, false);
      _toggleClass(ghostEl, options.fallbackClass, true);
      _toggleClass(ghostEl, options.dragClass, true);

      _css(ghostEl, 'top', rect.top - parseInt(css.marginTop, 10));
      _css(ghostEl, 'left', rect.left - parseInt(css.marginLeft, 10));
      _css(ghostEl, 'width', rect.width);
      _css(ghostEl, 'height', rect.height);
      _css(ghostEl, 'opacity', '0.8');
      _css(ghostEl, 'position', 'fixed');
      _css(ghostEl, 'zIndex', '100000');
      _css(ghostEl, 'pointerEvents', 'none');

      options.fallbackOnBody && document$1.body.appendChild(ghostEl) || rootEl.appendChild(ghostEl);

      // Fixing dimensions.
      ghostRect = ghostEl.getBoundingClientRect();
      _css(ghostEl, 'width', rect.width * 2 - ghostRect.width);
      _css(ghostEl, 'height', rect.height * 2 - ghostRect.height);
    }
  },

  _onDragStart: function ( /**Event*/evt, /**boolean*/useFallback) {
    var dataTransfer = evt.dataTransfer,
        options = this.options;

    this._offUpEvents();

    if (activeGroup.checkPull(this, this, dragEl, evt)) {
      cloneEl = _clone(dragEl);

      cloneEl.draggable = false;
      cloneEl.style['will-change'] = '';

      _css(cloneEl, 'display', 'none');
      _toggleClass(cloneEl, this.options.chosenClass, false);

      rootEl.insertBefore(cloneEl, dragEl);
      _dispatchEvent(this, rootEl, 'clone', dragEl);
    }

    _toggleClass(dragEl, options.dragClass, true);

    if (useFallback) {
      if (useFallback === 'touch') {
        // Bind touch events
        _on(document$1, 'touchmove', this._onTouchMove);
        _on(document$1, 'touchend', this._onDrop);
        _on(document$1, 'touchcancel', this._onDrop);
        _on(document$1, 'pointermove', this._onTouchMove);
        _on(document$1, 'pointerup', this._onDrop);
      } else {
        // Old brwoser
        _on(document$1, 'mousemove', this._onTouchMove);
        _on(document$1, 'mouseup', this._onDrop);
      }

      this._loopId = setInterval(this._emulateDragOver, 50);
    } else {
      if (dataTransfer) {
        dataTransfer.effectAllowed = 'move';
        options.setData && options.setData.call(this, dataTransfer, dragEl);
      }

      _on(document$1, 'drop', this);
      setTimeout(this._dragStarted, 0);
    }
  },

  _onDragOver: function ( /**Event*/evt) {
    var el = this.el,
        target,
        dragRect,
        targetRect,
        revert,
        options = this.options,
        group = options.group,
        activeSortable = Sortable.active,
        isOwner = activeGroup === group,
        isMovingBetweenSortable = false,
        canSort = options.sort;

    if (evt.preventDefault !== void 0) {
      evt.preventDefault();
      !options.dragoverBubble && evt.stopPropagation();
    }

    if (dragEl.animated) {
      return;
    }

    moved = true;

    if (activeSortable && !options.disabled && (isOwner ? canSort || (revert = !rootEl.contains(dragEl)) // Reverting item into the original list
    : putSortable === this || (activeSortable.lastPullMode = activeGroup.checkPull(this, activeSortable, dragEl, evt)) && group.checkPut(this, activeSortable, dragEl, evt)) && (evt.rootEl === void 0 || evt.rootEl === this.el) // touch fallback
    ) {
        // Smart auto-scrolling
        _autoScroll(evt, options, this.el);

        if (_silent) {
          return;
        }

        target = _closest(evt.target, options.draggable, el);
        dragRect = dragEl.getBoundingClientRect();

        if (putSortable !== this) {
          putSortable = this;
          isMovingBetweenSortable = true;
        }

        if (revert) {
          _cloneHide(activeSortable, true);
          parentEl = rootEl; // actualization

          if (cloneEl || nextEl) {
            rootEl.insertBefore(dragEl, cloneEl || nextEl);
          } else if (!canSort) {
            rootEl.appendChild(dragEl);
          }

          return;
        }

        if (el.children.length === 0 || el.children[0] === ghostEl || el === evt.target && _ghostIsLast(el, evt)) {
          //assign target only if condition is true
          if (el.children.length !== 0 && el.children[0] !== ghostEl && el === evt.target) {
            target = el.lastElementChild;
          }

          if (target) {
            if (target.animated) {
              return;
            }

            targetRect = target.getBoundingClientRect();
          }

          _cloneHide(activeSortable, isOwner);

          if (_onMove(rootEl, el, dragEl, dragRect, target, targetRect, evt) !== false) {
            if (!dragEl.contains(el)) {
              el.appendChild(dragEl);
              parentEl = el; // actualization
            }

            this._animate(dragRect, dragEl);
            target && this._animate(targetRect, target);
          }
        } else if (target && !target.animated && target !== dragEl && target.parentNode[expando] !== void 0) {
          if (lastEl !== target) {
            lastEl = target;
            lastCSS = _css(target);
            lastParentCSS = _css(target.parentNode);
          }

          targetRect = target.getBoundingClientRect();

          var width = targetRect.right - targetRect.left,
              height = targetRect.bottom - targetRect.top,
              floating = R_FLOAT.test(lastCSS.cssFloat + lastCSS.display) || lastParentCSS.display == 'flex' && lastParentCSS['flex-direction'].indexOf('row') === 0,
              isWide = target.offsetWidth > dragEl.offsetWidth,
              isLong = target.offsetHeight > dragEl.offsetHeight,
              halfway = (floating ? (evt.clientX - targetRect.left) / width : (evt.clientY - targetRect.top) / height) > 0.5,
              nextSibling = target.nextElementSibling,
              after = false;

          if (floating) {
            var elTop = dragEl.offsetTop,
                tgTop = target.offsetTop;

            if (elTop === tgTop) {
              after = target.previousElementSibling === dragEl && !isWide || halfway && isWide;
            } else if (target.previousElementSibling === dragEl || dragEl.previousElementSibling === target) {
              after = (evt.clientY - targetRect.top) / height > 0.5;
            } else {
              after = tgTop > elTop;
            }
          } else if (!isMovingBetweenSortable) {
            after = nextSibling !== dragEl && !isLong || halfway && isLong;
          }

          var moveVector = _onMove(rootEl, el, dragEl, dragRect, target, targetRect, evt, after);

          if (moveVector !== false) {
            if (moveVector === 1 || moveVector === -1) {
              after = moveVector === 1;
            }

            _silent = true;
            setTimeout(_unsilent, 30);

            _cloneHide(activeSortable, isOwner);

            if (!dragEl.contains(el)) {
              if (after && !nextSibling) {
                el.appendChild(dragEl);
              } else {
                target.parentNode.insertBefore(dragEl, after ? nextSibling : target);
              }
            }

            parentEl = dragEl.parentNode; // actualization

            this._animate(dragRect, dragEl);
            this._animate(targetRect, target);
          }
        }
      }
  },

  _animate: function (prevRect, target) {
    var ms = this.options.animation;

    if (ms) {
      var currentRect = target.getBoundingClientRect();

      if (prevRect.nodeType === 1) {
        prevRect = prevRect.getBoundingClientRect();
      }

      _css(target, 'transition', 'none');
      _css(target, 'transform', 'translate3d(' + (prevRect.left - currentRect.left) + 'px,' + (prevRect.top - currentRect.top) + 'px,0)');

      target.offsetWidth; // repaint

      _css(target, 'transition', 'all ' + ms + 'ms');
      _css(target, 'transform', 'translate3d(0,0,0)');

      clearTimeout(target.animated);
      target.animated = setTimeout(function () {
        _css(target, 'transition', '');
        _css(target, 'transform', '');
        target.animated = false;
      }, ms);
    }
  },

  _offUpEvents: function () {
    var ownerDocument = this.el.ownerDocument;

    _off(document$1, 'touchmove', this._onTouchMove);
    _off(document$1, 'pointermove', this._onTouchMove);
    _off(ownerDocument, 'mouseup', this._onDrop);
    _off(ownerDocument, 'touchend', this._onDrop);
    _off(ownerDocument, 'pointerup', this._onDrop);
    _off(ownerDocument, 'touchcancel', this._onDrop);
    _off(ownerDocument, 'pointercancel', this._onDrop);
    _off(ownerDocument, 'selectstart', this);
  },

  _onDrop: function ( /**Event*/evt) {
    var el = this.el,
        options = this.options;

    clearInterval(this._loopId);
    clearInterval(autoScroll.pid);
    clearTimeout(this._dragStartTimer);

    // Unbind events
    _off(document$1, 'mousemove', this._onTouchMove);

    if (this.nativeDraggable) {
      _off(document$1, 'drop', this);
      _off(el, 'dragstart', this._onDragStart);
    }

    this._offUpEvents();

    if (evt) {
      if (moved) {
        evt.preventDefault();
        !options.dropBubble && evt.stopPropagation();
      }

      ghostEl && ghostEl.parentNode && ghostEl.parentNode.removeChild(ghostEl);

      if (rootEl === parentEl || Sortable.active.lastPullMode !== 'clone') {
        // Remove clone
        cloneEl && cloneEl.parentNode && cloneEl.parentNode.removeChild(cloneEl);
      }

      if (dragEl) {
        if (this.nativeDraggable) {
          _off(dragEl, 'dragend', this);
        }

        _disableDraggable(dragEl);
        dragEl.style['will-change'] = '';

        // Remove class's
        _toggleClass(dragEl, this.options.ghostClass, false);
        _toggleClass(dragEl, this.options.chosenClass, false);

        // Drag stop event
        _dispatchEvent(this, rootEl, 'unchoose', dragEl, rootEl, oldIndex);

        if (rootEl !== parentEl) {
          newIndex = _index(dragEl, options.draggable);

          if (newIndex >= 0) {
            // Add event
            _dispatchEvent(null, parentEl, 'add', dragEl, rootEl, oldIndex, newIndex);

            // Remove event
            _dispatchEvent(this, rootEl, 'remove', dragEl, rootEl, oldIndex, newIndex);

            // drag from one list and drop into another
            _dispatchEvent(null, parentEl, 'sort', dragEl, rootEl, oldIndex, newIndex);
            _dispatchEvent(this, rootEl, 'sort', dragEl, rootEl, oldIndex, newIndex);
          }
        } else {
          if (dragEl.nextSibling !== nextEl) {
            // Get the index of the dragged element within its parent
            newIndex = _index(dragEl, options.draggable);

            if (newIndex >= 0) {
              // drag & drop within the same list
              _dispatchEvent(this, rootEl, 'update', dragEl, rootEl, oldIndex, newIndex);
              _dispatchEvent(this, rootEl, 'sort', dragEl, rootEl, oldIndex, newIndex);
            }
          }
        }

        if (Sortable.active) {
          /* jshint eqnull:true */
          if (newIndex == null || newIndex === -1) {
            newIndex = oldIndex;
          }

          _dispatchEvent(this, rootEl, 'end', dragEl, rootEl, oldIndex, newIndex);

          // Save sorting
          this.save();
        }
      }
    }

    this._nulling();
  },

  _nulling: function () {
    rootEl = dragEl = parentEl = ghostEl = nextEl = cloneEl = lastDownEl = scrollEl = scrollParentEl = tapEvt = touchEvt = moved = newIndex = lastEl = lastCSS = putSortable = activeGroup = Sortable.active = null;

    savedInputChecked.forEach(function (el) {
      el.checked = true;
    });
    savedInputChecked.length = 0;
  },

  handleEvent: function ( /**Event*/evt) {
    switch (evt.type) {
      case 'drop':
      case 'dragend':
        this._onDrop(evt);
        break;

      case 'dragover':
      case 'dragenter':
        if (dragEl) {
          this._onDragOver(evt);
          _globalDragOver(evt);
        }
        break;

      case 'selectstart':
        evt.preventDefault();
        break;
    }
  },

  /**
   * Serializes the item into an array of string.
   * @returns {String[]}
   */
  toArray: function () {
    var order = [],
        el,
        children = this.el.children,
        i = 0,
        n = children.length,
        options = this.options;

    for (; i < n; i++) {
      el = children[i];
      if (_closest(el, options.draggable, this.el)) {
        order.push(el.getAttribute(options.dataIdAttr) || _generateId(el));
      }
    }

    return order;
  },

  /**
   * Sorts the elements according to the array.
   * @param  {String[]}  order  order of the items
   */
  sort: function (order) {
    var items = {},
        rootEl = this.el;

    this.toArray().forEach(function (id, i) {
      var el = rootEl.children[i];

      if (_closest(el, this.options.draggable, rootEl)) {
        items[id] = el;
      }
    }, this);

    order.forEach(function (id) {
      if (items[id]) {
        rootEl.removeChild(items[id]);
        rootEl.appendChild(items[id]);
      }
    });
  },

  /**
   * Save the current sorting
   */
  save: function () {
    var store = this.options.store;
    store && store.set(this);
  },

  /**
   * For each element in the set, get the first element that matches the selector by testing the element itself and traversing up through its ancestors in the DOM tree.
   * @param   {HTMLElement}  el
   * @param   {String}       [selector]  default: `options.draggable`
   * @returns {HTMLElement|null}
   */
  closest: function (el, selector) {
    return _closest(el, selector || this.options.draggable, this.el);
  },

  /**
   * Set/get option
   * @param   {string} name
   * @param   {*}      [value]
   * @returns {*}
   */
  option: function (name, value) {
    var options = this.options;

    if (value === void 0) {
      return options[name];
    } else {
      options[name] = value;

      if (name === 'group') {
        _prepareGroup(options);
      }
    }
  },

  /**
   * Destroy
   */
  destroy: function () {
    var el = this.el;

    el[expando] = null;

    _off(el, 'mousedown', this._onTapStart);
    _off(el, 'touchstart', this._onTapStart);
    _off(el, 'pointerdown', this._onTapStart);

    if (this.nativeDraggable) {
      _off(el, 'dragover', this);
      _off(el, 'dragenter', this);
    }

    // Remove draggable attributes
    Array.prototype.forEach.call(el.querySelectorAll('[draggable]'), function (el) {
      el.removeAttribute('draggable');
    });

    touchDragOverListeners.splice(touchDragOverListeners.indexOf(this._onDragOver), 1);

    this._onDrop();

    this.el = el = null;
  }
};

function _cloneHide(sortable, state) {
  if (sortable.lastPullMode !== 'clone') {
    state = true;
  }

  if (cloneEl && cloneEl.state !== state) {
    _css(cloneEl, 'display', state ? 'none' : '');

    if (!state) {
      if (cloneEl.state) {
        if (sortable.options.group.revertClone) {
          rootEl.insertBefore(cloneEl, nextEl);
          sortable._animate(dragEl, cloneEl);
        } else {
          rootEl.insertBefore(cloneEl, dragEl);
        }
      }
    }

    cloneEl.state = state;
  }
}

function _closest( /**HTMLElement*/el, /**String*/selector, /**HTMLElement*/ctx) {
  if (el) {
    ctx = ctx || document$1;

    do {
      if (selector === '>*' && el.parentNode === ctx || _matches(el, selector)) {
        return el;
      }
      /* jshint boss:true */
    } while (el = _getParentOrHost(el));
  }

  return null;
}

function _getParentOrHost(el) {
  var parent = el.host;

  return parent && parent.nodeType ? parent : el.parentNode;
}

function _globalDragOver( /**Event*/evt) {
  if (evt.dataTransfer) {
    evt.dataTransfer.dropEffect = 'move';
  }
  evt.preventDefault();
}

function _on(el, event, fn) {
  el.addEventListener(event, fn, captureMode);
}

function _off(el, event, fn) {
  el.removeEventListener(event, fn, captureMode);
}

function _toggleClass(el, name, state) {
  if (el) {
    if (el.classList) {
      el.classList[state ? 'add' : 'remove'](name);
    } else {
      var className = (' ' + el.className + ' ').replace(R_SPACE, ' ').replace(' ' + name + ' ', ' ');
      el.className = (className + (state ? ' ' + name : '')).replace(R_SPACE, ' ');
    }
  }
}

function _css(el, prop, val) {
  var style = el && el.style;

  if (style) {
    if (val === void 0) {
      if (document$1.defaultView && document$1.defaultView.getComputedStyle) {
        val = document$1.defaultView.getComputedStyle(el, '');
      } else if (el.currentStyle) {
        val = el.currentStyle;
      }

      return prop === void 0 ? val : val[prop];
    } else {
      if (!(prop in style)) {
        prop = '-webkit-' + prop;
      }

      style[prop] = val + (typeof val === 'string' ? '' : 'px');
    }
  }
}

function _find(ctx, tagName, iterator) {
  if (ctx) {
    var list = ctx.getElementsByTagName(tagName),
        i = 0,
        n = list.length;

    if (iterator) {
      for (; i < n; i++) {
        iterator(list[i], i);
      }
    }

    return list;
  }

  return [];
}

function _dispatchEvent(sortable, rootEl, name, targetEl, fromEl, startIndex, newIndex) {
  sortable = sortable || rootEl[expando];

  var evt = document$1.createEvent('Event'),
      options = sortable.options,
      onName = 'on' + name.charAt(0).toUpperCase() + name.substr(1);

  evt.initEvent(name, true, true);

  evt.to = rootEl;
  evt.from = fromEl || rootEl;
  evt.item = targetEl || rootEl;
  evt.clone = cloneEl;

  evt.oldIndex = startIndex;
  evt.newIndex = newIndex;

  rootEl.dispatchEvent(evt);

  if (options[onName]) {
    options[onName].call(sortable, evt);
  }
}

function _onMove(fromEl, toEl, dragEl, dragRect, targetEl, targetRect, originalEvt, willInsertAfter) {
  var evt,
      sortable = fromEl[expando],
      onMoveFn = sortable.options.onMove,
      retVal;

  evt = document$1.createEvent('Event');
  evt.initEvent('move', true, true);

  evt.to = toEl;
  evt.from = fromEl;
  evt.dragged = dragEl;
  evt.draggedRect = dragRect;
  evt.related = targetEl || toEl;
  evt.relatedRect = targetRect || toEl.getBoundingClientRect();
  evt.willInsertAfter = willInsertAfter;

  fromEl.dispatchEvent(evt);

  if (onMoveFn) {
    retVal = onMoveFn.call(sortable, evt, originalEvt);
  }

  return retVal;
}

function _disableDraggable(el) {
  el.draggable = false;
}

function _unsilent() {
  _silent = false;
}

/** @returns {HTMLElement|false} */
function _ghostIsLast(el, evt) {
  var lastEl = el.lastElementChild,
      rect = lastEl.getBoundingClientRect();

  // 5 — min delta
  // abs — нельзя добавлять, а то глюки при наведении сверху
  return evt.clientY - (rect.top + rect.height) > 5 || evt.clientX - (rect.left + rect.width) > 5;
}

/**
 * Generate id
 * @param   {HTMLElement} el
 * @returns {String}
 * @private
 */
function _generateId(el) {
  var str = el.tagName + el.className + el.src + el.href + el.textContent,
      i = str.length,
      sum = 0;

  while (i--) {
    sum += str.charCodeAt(i);
  }

  return sum.toString(36);
}

/**
 * Returns the index of an element within its parent for a selected set of
 * elements
 * @param  {HTMLElement} el
 * @param  {selector} selector
 * @return {number}
 */
function _index(el, selector) {
  var index = 0;

  if (!el || !el.parentNode) {
    return -1;
  }

  while (el && (el = el.previousElementSibling)) {
    if (el.nodeName.toUpperCase() !== 'TEMPLATE' && (selector === '>*' || _matches(el, selector))) {
      index++;
    }
  }

  return index;
}

function _matches( /**HTMLElement*/el, /**String*/selector) {
  if (el) {
    selector = selector.split('.');

    var tag = selector.shift().toUpperCase(),
        re = new RegExp('\\s(' + selector.join('|') + ')(?=\\s)', 'g');

    return (tag === '' || el.nodeName.toUpperCase() == tag) && (!selector.length || ((' ' + el.className + ' ').match(re) || []).length == selector.length);
  }

  return false;
}

function _throttle(callback, ms) {
  var args, _this;

  return function () {
    if (args === void 0) {
      args = arguments;
      _this = this;

      setTimeout(function () {
        if (args.length === 1) {
          callback.call(_this, args[0]);
        } else {
          callback.apply(_this, args);
        }

        args = void 0;
      }, ms);
    }
  };
}

function _extend(dst, src) {
  if (dst && src) {
    for (var key in src) {
      if (src.hasOwnProperty(key)) {
        dst[key] = src[key];
      }
    }
  }

  return dst;
}

function _clone(el) {
  return $ ? $(el).clone(true)[0] : Polymer && Polymer.dom ? Polymer.dom(el).cloneNode(true) : el.cloneNode(true);
}

function _saveInputCheckedState(root) {
  var inputs = root.getElementsByTagName('input');
  var idx = inputs.length;

  while (idx--) {
    var el = inputs[idx];
    el.checked && savedInputChecked.push(el);
  }
}

// Fixed #973: 
_on(document$1, 'touchmove', function (evt) {
  if (Sortable.active) {
    evt.preventDefault();
  }
});

try {
  window.addEventListener('test', null, Object.defineProperty({}, 'passive', {
    get: function () {
      captureMode = {
        capture: false,
        passive: false
      };
    }
  }));
} catch (err) {}

// Export utils
Sortable.utils = {
  on: _on,
  off: _off,
  css: _css,
  find: _find,
  is: function (el, selector) {
    return !!_closest(el, selector, el);
  },
  extend: _extend,
  throttle: _throttle,
  closest: _closest,
  toggleClass: _toggleClass,
  clone: _clone,
  index: _index
};

/**
 * Create sortable instance
 * @param {HTMLElement}  el
 * @param {Object}      [options]
 */
Sortable.create = function (el, options) {
  return new Sortable(el, options);
};

// Export
Sortable.version = '1.6.0';

const data = new Vuex.Store({
  state: {
    heads: [new ImagePart({ selection: 0, params: { width: 130, height: 115, x: 0, y: 0, rotation: 0, mirror: false } })],
    faces: [new ImagePart({ selection: 0, params: { width: 60, height: 70, x: 0, y: 0, rotation: 0, mirror: false } })],
    bodies: [],
    accessories: [],
    lines: [new TextPart({ context: '吔屎啦你', params: { size: 18, x: 0, y: 75, rotation: 0, mirror: false } })],
    output: {
      padding: 10,
      region: { left: 0, right: 0, top: 0, bottom: 0 },
      scale: 1,
      quality: 50,
      iteration: 6
    }
  },
  mutations: {
    addHead(state) {
      state.heads = [...state.heads, new ImagePart()];
    },
    addFace(state) {
      state.faces = [...state.faces, new ImagePart()];
    },
    addBody(state) {
      state.bodies = [...state.bodies, new ImagePart()];
    },
    addAccessory(state) {
      state.accessories = [...state.accessories, new ImagePart()];
    },
    addLine(state) {
      state.lines = [...state.lines, new TextPart()];
    },
    delete(state, { category, index }) {
      state[category].splice(index, 1);
    },
    select(state, { category, index, value }) {
      Vue.set(state[category][index], 'selection', value);
    },
    contextChange(state, { index, value }) {
      Vue.set(state['lines'][index], 'context', value);
    },
    setParam(state, { category, index, param, value }) {
      Vue.set(state[category][index].params, param, value);
    },
    updatePadding(state, padding) {
      state.output.padding = padding;
    },
    updateRegion(state, region) {
      state.output.region = region;
    },
    updateScale(state, scale) {
      state.output.scale = scale;
    },
    updateQuality(state, quality) {
      state.output.quality = quality;
    },
    updateIteration(state, iteration) {
      state.output.iteration = iteration;
    }
  }
});

let browser = {};

// Opera 8.0+
browser.isOpera = !!window.opr && !!opr.addons || !!window.opera || navigator.userAgent.indexOf(' OPR/') >= 0;

// Firefox 1.0+
browser.isFirefox = typeof InstallTrigger !== 'undefined';

// Safari 3.0+ "[object HTMLElementConstructor]" 
browser.isSafari = /constructor/i.test(window.HTMLElement) || function (p) {
  return p.toString() === "[object SafariRemoteNotification]";
}(!window['safari'] || typeof safari !== 'undefined' && safari.pushNotification);

// Internet Explorer 6-11
browser.isIE = /*@cc_on!@*/false || !!document.documentMode;

// Edge 20+
browser.isEdge = !browser.isIE && !!window.StyleMedia;

// Chrome 1+
browser.isChrome = !!window.chrome && !!window.chrome.webstore;

// Blink engine detection
browser.isBlink = (browser.isChrome || browser.isOpera) && !!window.CSS;

document.querySelector('#imcompitableCover').style.display = 'none';
// }
// else{
//   alert(browser.isFirefox);
//   alert(browser.isChrome);
//   alert(browser.isSafari);
// }

const app = new Vue({
  el: '#app',
  mixins: [swipeMixin],
  store: data,
  data: {
    canvasWidth: canvasWidth,
    canvasHeight: canvasHeight,
    elements: {
      heads: [],
      faces: [],
      bodies: [],
      accessories: []
    },
    order: [{ type: 'heads', index: 0 }, { type: 'faces', index: 0 }, { type: 'lines', index: 0 }],
    activePart: null,
    controller: {
      displayBorder: false,
      showOutput: false
    }
  },
  methods: {
    updateCanvas: function (name, data$$1) {
      this.redraw();
    },
    updateTarget: function (name) {
      this.activePart = name;
      this.redraw();
    },
    addBody: function () {
      if (this.$store.state.bodies.length <= 3) {
        this.$store.commit('addBody');
        this.order.push({ type: 'bodies', index: this.$store.state.bodies.length - 1 });
      } else {
        return;
      }
    },
    addAccessory: function () {
      if (this.$store.state.accessories.length <= 3) {
        this.$store.commit('addAccessory');
        this.order.push({ type: 'accessories', index: this.$store.state.accessories.length - 1 });
      } else {
        return;
      }
    },
    addLine: function () {
      if (this.$store.state.lines.length <= 3) {
        this.$store.commit('addLine');
        this.order.push({ type: 'lines', index: this.$store.state.lines.length - 1 });
      } else {
        return;
      }
    },
    output: function () {
      this.controller.showOutput = true;
    },
    redraw: function () {
      var drawList = this.order.map(v => {
        return { type: v.type, index: v.index, data: this.$store.state[v.type][v.index] };
      });
      newDraw(drawList);
      this.$store.commit('updateRegion', newBorder(drawList, +this.$store.state.padding, this.controller.displayBorder));
    }
  },
  created: function () {
    for (var i = 0; i < el_heads.length; i++) {
      this.elements.heads.push(el_heads[i]);
    }
    for (var i = 0; i < el_faces.length; i++) {
      this.elements.faces.push(el_faces[i]);
    }
    for (var i = 0; i < el_bodies.length; i++) {
      this.elements.bodies.push(el_bodies[i]);
    }
    for (var i = 0; i < el_accessories.length; i++) {
      this.elements.accessories.push(el_accessories[i]);
    }
  },
  mounted: function () {
    Promise.all([new Promise(resolve => {
      document.querySelector('#heads0').querySelector('.element').onload = () => {
        resolve();
      };
    }), new Promise(resolve => {
      document.querySelector('#faces0').querySelector('.element').onload = () => {
        resolve();
      };
    })]).then(() => {
      this.redraw();
    });
    Sortable.create(renderList, {
      group: 'renderList',
      animation: 100,
      onChoose: evt => {
        this.activePart = evt.item.innerHTML;
      },
      onRemove: evt => {
        this.order.splice(evt.oldIndex, 1);
        this.redraw();
      },
      onUpdate: evt => {
        this.order.splice(evt.newIndex, 0, this.order.splice(evt.oldIndex, 1)[0]);
        this.redraw();
      }
    });
    Sortable.create(trashBin, {
      group: { name: 'trashBin', put: 'renderList' },
      animation: 100,
      onAdd: evt => {
        evt.item.remove();
        this.$store.commit('delete', { category: evt.item.innerText.slice(0, -1), index: evt.item.innerText.slice(-1) });
      }
    });
  }
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
